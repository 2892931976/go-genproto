// Code generated by protoc-gen-go.
// source: google.golang.org/genproto/googleapis/bigtable/admin/table/v1/bigtable_table_service_messages.proto
// DO NOT EDIT!

package google_bigtable_admin_table_v1 // import "google.golang.org/genproto/googleapis/bigtable/admin/table/v1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CreateTableRequest struct {
	// The unique name of the cluster in which to create the new table.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The name by which the new table should be referred to within the cluster,
	// e.g. "foobar" rather than "<cluster_name>/tables/foobar".
	TableId string `protobuf:"bytes,2,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	// The Table to create. The `name` field of the Table and all of its
	// ColumnFamilies must be left blank, and will be populated in the response.
	Table *Table `protobuf:"bytes,3,opt,name=table" json:"table,omitempty"`
	// The optional list of row keys that will be used to initially split the
	// table into several tablets (Tablets are similar to HBase regions).
	// Given two split keys, "s1" and "s2", three tablets will be created,
	// spanning the key ranges: [, s1), [s1, s2), [s2, ).
	//
	// Example:
	//  * Row keys := ["a", "apple", "custom", "customer_1", "customer_2",
	//                 "other", "zz"]
	//  * initial_split_keys := ["apple", "customer_1", "customer_2", "other"]
	//  * Key assignment:
	//    - Tablet 1 [, apple)                => {"a"}.
	//    - Tablet 2 [apple, customer_1)      => {"apple", "custom"}.
	//    - Tablet 3 [customer_1, customer_2) => {"customer_1"}.
	//    - Tablet 4 [customer_2, other)      => {"customer_2"}.
	//    - Tablet 5 [other, )                => {"other", "zz"}.
	InitialSplitKeys []string `protobuf:"bytes,4,rep,name=initial_split_keys,json=initialSplitKeys" json:"initial_split_keys,omitempty"`
}

func (m *CreateTableRequest) Reset()                    { *m = CreateTableRequest{} }
func (m *CreateTableRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateTableRequest) ProtoMessage()               {}
func (*CreateTableRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *CreateTableRequest) GetTable() *Table {
	if m != nil {
		return m.Table
	}
	return nil
}

type ListTablesRequest struct {
	// The unique name of the cluster for which tables should be listed.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ListTablesRequest) Reset()                    { *m = ListTablesRequest{} }
func (m *ListTablesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListTablesRequest) ProtoMessage()               {}
func (*ListTablesRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

type ListTablesResponse struct {
	// The tables present in the requested cluster.
	// At present, only the names of the tables are populated.
	Tables []*Table `protobuf:"bytes,1,rep,name=tables" json:"tables,omitempty"`
}

func (m *ListTablesResponse) Reset()                    { *m = ListTablesResponse{} }
func (m *ListTablesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListTablesResponse) ProtoMessage()               {}
func (*ListTablesResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *ListTablesResponse) GetTables() []*Table {
	if m != nil {
		return m.Tables
	}
	return nil
}

type GetTableRequest struct {
	// The unique name of the requested table.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GetTableRequest) Reset()                    { *m = GetTableRequest{} }
func (m *GetTableRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTableRequest) ProtoMessage()               {}
func (*GetTableRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

type DeleteTableRequest struct {
	// The unique name of the table to be deleted.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *DeleteTableRequest) Reset()                    { *m = DeleteTableRequest{} }
func (m *DeleteTableRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteTableRequest) ProtoMessage()               {}
func (*DeleteTableRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

type RenameTableRequest struct {
	// The current unique name of the table.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The new name by which the table should be referred to within its containing
	// cluster, e.g. "foobar" rather than "<cluster_name>/tables/foobar".
	NewId string `protobuf:"bytes,2,opt,name=new_id,json=newId" json:"new_id,omitempty"`
}

func (m *RenameTableRequest) Reset()                    { *m = RenameTableRequest{} }
func (m *RenameTableRequest) String() string            { return proto.CompactTextString(m) }
func (*RenameTableRequest) ProtoMessage()               {}
func (*RenameTableRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

type CreateColumnFamilyRequest struct {
	// The unique name of the table in which to create the new column family.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The name by which the new column family should be referred to within the
	// table, e.g. "foobar" rather than "<table_name>/columnFamilies/foobar".
	ColumnFamilyId string `protobuf:"bytes,2,opt,name=column_family_id,json=columnFamilyId" json:"column_family_id,omitempty"`
	// The column family to create. The `name` field must be left blank.
	ColumnFamily *ColumnFamily `protobuf:"bytes,3,opt,name=column_family,json=columnFamily" json:"column_family,omitempty"`
}

func (m *CreateColumnFamilyRequest) Reset()                    { *m = CreateColumnFamilyRequest{} }
func (m *CreateColumnFamilyRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateColumnFamilyRequest) ProtoMessage()               {}
func (*CreateColumnFamilyRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *CreateColumnFamilyRequest) GetColumnFamily() *ColumnFamily {
	if m != nil {
		return m.ColumnFamily
	}
	return nil
}

type DeleteColumnFamilyRequest struct {
	// The unique name of the column family to be deleted.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *DeleteColumnFamilyRequest) Reset()                    { *m = DeleteColumnFamilyRequest{} }
func (m *DeleteColumnFamilyRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteColumnFamilyRequest) ProtoMessage()               {}
func (*DeleteColumnFamilyRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

type BulkDeleteRowsRequest struct {
	// The unique name of the table on which to perform the bulk delete
	TableName string `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	// Types that are valid to be assigned to Target:
	//	*BulkDeleteRowsRequest_RowKeyPrefix
	//	*BulkDeleteRowsRequest_DeleteAllDataFromTable
	Target isBulkDeleteRowsRequest_Target `protobuf_oneof:"target"`
}

func (m *BulkDeleteRowsRequest) Reset()                    { *m = BulkDeleteRowsRequest{} }
func (m *BulkDeleteRowsRequest) String() string            { return proto.CompactTextString(m) }
func (*BulkDeleteRowsRequest) ProtoMessage()               {}
func (*BulkDeleteRowsRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

type isBulkDeleteRowsRequest_Target interface {
	isBulkDeleteRowsRequest_Target()
}

type BulkDeleteRowsRequest_RowKeyPrefix struct {
	RowKeyPrefix []byte `protobuf:"bytes,2,opt,name=row_key_prefix,json=rowKeyPrefix,proto3,oneof"`
}
type BulkDeleteRowsRequest_DeleteAllDataFromTable struct {
	DeleteAllDataFromTable bool `protobuf:"varint,3,opt,name=delete_all_data_from_table,json=deleteAllDataFromTable,oneof"`
}

func (*BulkDeleteRowsRequest_RowKeyPrefix) isBulkDeleteRowsRequest_Target()           {}
func (*BulkDeleteRowsRequest_DeleteAllDataFromTable) isBulkDeleteRowsRequest_Target() {}

func (m *BulkDeleteRowsRequest) GetTarget() isBulkDeleteRowsRequest_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *BulkDeleteRowsRequest) GetRowKeyPrefix() []byte {
	if x, ok := m.GetTarget().(*BulkDeleteRowsRequest_RowKeyPrefix); ok {
		return x.RowKeyPrefix
	}
	return nil
}

func (m *BulkDeleteRowsRequest) GetDeleteAllDataFromTable() bool {
	if x, ok := m.GetTarget().(*BulkDeleteRowsRequest_DeleteAllDataFromTable); ok {
		return x.DeleteAllDataFromTable
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BulkDeleteRowsRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BulkDeleteRowsRequest_OneofMarshaler, _BulkDeleteRowsRequest_OneofUnmarshaler, _BulkDeleteRowsRequest_OneofSizer, []interface{}{
		(*BulkDeleteRowsRequest_RowKeyPrefix)(nil),
		(*BulkDeleteRowsRequest_DeleteAllDataFromTable)(nil),
	}
}

func _BulkDeleteRowsRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BulkDeleteRowsRequest)
	// target
	switch x := m.Target.(type) {
	case *BulkDeleteRowsRequest_RowKeyPrefix:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.RowKeyPrefix)
	case *BulkDeleteRowsRequest_DeleteAllDataFromTable:
		t := uint64(0)
		if x.DeleteAllDataFromTable {
			t = 1
		}
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("BulkDeleteRowsRequest.Target has unexpected type %T", x)
	}
	return nil
}

func _BulkDeleteRowsRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BulkDeleteRowsRequest)
	switch tag {
	case 2: // target.row_key_prefix
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Target = &BulkDeleteRowsRequest_RowKeyPrefix{x}
		return true, err
	case 3: // target.delete_all_data_from_table
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Target = &BulkDeleteRowsRequest_DeleteAllDataFromTable{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _BulkDeleteRowsRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BulkDeleteRowsRequest)
	// target
	switch x := m.Target.(type) {
	case *BulkDeleteRowsRequest_RowKeyPrefix:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.RowKeyPrefix)))
		n += len(x.RowKeyPrefix)
	case *BulkDeleteRowsRequest_DeleteAllDataFromTable:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*CreateTableRequest)(nil), "google.bigtable.admin.table.v1.CreateTableRequest")
	proto.RegisterType((*ListTablesRequest)(nil), "google.bigtable.admin.table.v1.ListTablesRequest")
	proto.RegisterType((*ListTablesResponse)(nil), "google.bigtable.admin.table.v1.ListTablesResponse")
	proto.RegisterType((*GetTableRequest)(nil), "google.bigtable.admin.table.v1.GetTableRequest")
	proto.RegisterType((*DeleteTableRequest)(nil), "google.bigtable.admin.table.v1.DeleteTableRequest")
	proto.RegisterType((*RenameTableRequest)(nil), "google.bigtable.admin.table.v1.RenameTableRequest")
	proto.RegisterType((*CreateColumnFamilyRequest)(nil), "google.bigtable.admin.table.v1.CreateColumnFamilyRequest")
	proto.RegisterType((*DeleteColumnFamilyRequest)(nil), "google.bigtable.admin.table.v1.DeleteColumnFamilyRequest")
	proto.RegisterType((*BulkDeleteRowsRequest)(nil), "google.bigtable.admin.table.v1.BulkDeleteRowsRequest")
}

func init() {
	proto.RegisterFile("google.golang.org/genproto/googleapis/bigtable/admin/table/v1/bigtable_table_service_messages.proto", fileDescriptor2)
}

var fileDescriptor2 = []byte{
	// 499 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x54, 0xdf, 0x6f, 0xd3, 0x30,
	0x10, 0x26, 0x74, 0x2b, 0xdd, 0x51, 0xc6, 0xb0, 0x34, 0xd4, 0x4e, 0x02, 0x0d, 0x4b, 0x83, 0x3e,
	0x4c, 0x89, 0x06, 0x8f, 0x80, 0x10, 0xdd, 0x34, 0xa8, 0xf8, 0xa1, 0x92, 0x22, 0xf1, 0x18, 0xb9,
	0xc9, 0x35, 0xb2, 0xe6, 0xc4, 0x21, 0x76, 0x5b, 0xf6, 0x0f, 0xf1, 0x84, 0xf8, 0x1b, 0x71, 0xec,
	0xb0, 0x76, 0x2f, 0xcd, 0x1e, 0xf6, 0x12, 0x5d, 0xee, 0xbe, 0xfb, 0xee, 0xfc, 0xdd, 0xd9, 0x10,
	0xa7, 0x52, 0xa6, 0x02, 0xfd, 0x54, 0x0a, 0x96, 0xa7, 0xbe, 0x2c, 0xd3, 0x20, 0xc5, 0xbc, 0x28,
	0xa5, 0x96, 0x81, 0x0b, 0xb1, 0x82, 0xab, 0x60, 0xca, 0x53, 0xcd, 0xa6, 0x02, 0x03, 0x96, 0x64,
	0x3c, 0x0f, 0x9c, 0xbd, 0x38, 0xb9, 0xf2, 0x47, 0xee, 0xab, 0xb0, 0x5c, 0xf0, 0x18, 0xa3, 0x0c,
	0x95, 0x62, 0x29, 0x2a, 0xdf, 0x12, 0x91, 0xa7, 0x75, 0x91, 0xff, 0x68, 0xdf, 0xb2, 0xf8, 0xce,
	0x5e, 0x9c, 0x1c, 0xfc, 0xb8, 0xd5, 0x26, 0x12, 0xa6, 0x99, 0x2b, 0x4c, 0xff, 0x7a, 0x40, 0x4e,
	0x4b, 0x64, 0x1a, 0xbf, 0x57, 0xa1, 0x10, 0x7f, 0xce, 0x51, 0x69, 0x42, 0x60, 0x2b, 0x67, 0x19,
	0xf6, 0xbc, 0x43, 0x6f, 0xb0, 0x13, 0x5a, 0x9b, 0xf4, 0xa1, 0xe3, 0xd2, 0x79, 0xd2, 0xbb, 0x6b,
	0xfd, 0xf7, 0xec, 0xff, 0x28, 0x21, 0xaf, 0x61, 0xdb, 0x9a, 0xbd, 0x96, 0xf1, 0xdf, 0x7f, 0x79,
	0xe4, 0x6f, 0x3e, 0x8e, 0xef, 0x6a, 0xb9, 0x1c, 0x72, 0x0c, 0x84, 0xe7, 0x5c, 0x73, 0x26, 0x22,
	0x55, 0x08, 0xae, 0xa3, 0x0b, 0xbc, 0x54, 0xbd, 0xad, 0xc3, 0x96, 0xa9, 0xb0, 0x57, 0x47, 0x26,
	0x55, 0xe0, 0x93, 0xf1, 0xd3, 0x17, 0xf0, 0xe8, 0x33, 0x57, 0xda, 0x32, 0xa8, 0x0d, 0xed, 0xd2,
	0x09, 0x90, 0x75, 0xa0, 0x2a, 0x64, 0xae, 0x90, 0xbc, 0x85, 0xb6, 0xad, 0xaa, 0x0c, 0xb6, 0x75,
	0xf3, 0x56, 0xeb, 0x24, 0x7a, 0x04, 0x0f, 0x3f, 0xa0, 0x6e, 0x92, 0x8a, 0x0e, 0x80, 0x9c, 0xa1,
	0xc0, 0x66, 0x51, 0xe9, 0x3b, 0x20, 0x21, 0x56, 0x56, 0xa3, 0xfc, 0xfb, 0xd0, 0xce, 0x71, 0xb9,
	0x12, 0x7f, 0xdb, 0xfc, 0x8d, 0x12, 0xfa, 0xc7, 0x83, 0xbe, 0x1b, 0xe0, 0xa9, 0x14, 0xf3, 0x2c,
	0x3f, 0x67, 0x19, 0x17, 0x97, 0x9b, 0x88, 0x06, 0xb0, 0x17, 0x5b, 0x68, 0x34, 0xb3, 0xd8, 0x15,
	0xe5, 0x6e, 0xbc, 0x46, 0x61, 0xc6, 0xfa, 0x0d, 0x1e, 0x5c, 0x43, 0xd6, 0xe3, 0x3d, 0x6e, 0xd2,
	0xec, 0x5a, 0x27, 0xdd, 0x75, 0x52, 0x1a, 0x40, 0xdf, 0x29, 0x73, 0xc3, 0x6e, 0xe9, 0x6f, 0x0f,
	0xf6, 0x87, 0x73, 0x71, 0xe1, 0xb2, 0x42, 0xb9, 0xbc, 0x1a, 0xfa, 0x13, 0x00, 0xb7, 0x8f, 0x6b,
	0x39, 0x3b, 0xd6, 0xf3, 0xb5, 0x3a, 0xe6, 0x73, 0xd8, 0x2d, 0xe5, 0xb2, 0x5a, 0xa6, 0xa8, 0x28,
	0x71, 0xc6, 0x7f, 0xd9, 0x43, 0x76, 0x3f, 0xde, 0x09, 0xbb, 0xc6, 0x6f, 0x76, 0x69, 0x6c, 0xbd,
	0xe4, 0x0d, 0x1c, 0x24, 0x96, 0x3b, 0x62, 0x42, 0xd8, 0xab, 0x11, 0xcd, 0x4a, 0x99, 0x45, 0xab,
	0x85, 0xee, 0x98, 0x9c, 0xc7, 0x0e, 0xf3, 0x5e, 0x88, 0x33, 0x83, 0x38, 0x37, 0x00, 0x3b, 0xb0,
	0x61, 0xa7, 0xda, 0xa7, 0x32, 0x45, 0x3d, 0x1c, 0x01, 0x8d, 0x65, 0xd6, 0x20, 0xcd, 0xf0, 0xd9,
	0xb0, 0x0e, 0xd8, 0xf4, 0x89, 0x7b, 0x0d, 0xbe, 0xd4, 0x8f, 0xc1, 0xb8, 0xba, 0x92, 0x63, 0x6f,
	0xda, 0xb6, 0x77, 0xf3, 0xd5, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3a, 0xb9, 0x40, 0x1a, 0x7b,
	0x04, 0x00, 0x00,
}
