// Code generated by protoc-gen-go.
// source: google.golang.org/genproto/googleapis/api/servicecontrol/v1/metric_value.proto
// DO NOT EDIT!

package google_api_servicecontrol_v1 // import "google.golang.org/genproto/googleapis/api/servicecontrol/v1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/serviceconfig"
import google_protobuf3 "github.com/golang/protobuf/ptypes/timestamp"
import _ "google.golang.org/genproto/googleapis/type/money"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Represents a single metric value.
type MetricValue struct {
	// The labels describing the metric value.
	// See comments on [google.api.servicecontrol.v1.Operation.labels][google.api.servicecontrol.v1.Operation.labels] for
	// the overriding relationship.
	Labels map[string]string `protobuf:"bytes,1,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The start of the time period over which this metric value's measurement
	// applies. The time period has different semantics for different metric
	// types (cumulative, delta, and gauge). See the metric definition
	// documentation in the service configuration for details.
	StartTime *google_protobuf3.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// The end of the time period over which this metric value's measurement
	// applies.
	EndTime *google_protobuf3.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	// The value. The type of value used in the request must
	// agree with the metric definition in the service configuration, otherwise
	// the MetricValue is rejected.
	//
	// Types that are valid to be assigned to Value:
	//	*MetricValue_BoolValue
	//	*MetricValue_Int64Value
	//	*MetricValue_DoubleValue
	//	*MetricValue_StringValue
	//	*MetricValue_DistributionValue
	Value isMetricValue_Value `protobuf_oneof:"value"`
}

func (m *MetricValue) Reset()                    { *m = MetricValue{} }
func (m *MetricValue) String() string            { return proto.CompactTextString(m) }
func (*MetricValue) ProtoMessage()               {}
func (*MetricValue) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

type isMetricValue_Value interface {
	isMetricValue_Value()
}

type MetricValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,4,opt,name=bool_value,json=boolValue,oneof"`
}
type MetricValue_Int64Value struct {
	Int64Value int64 `protobuf:"varint,5,opt,name=int64_value,json=int64Value,oneof"`
}
type MetricValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,6,opt,name=double_value,json=doubleValue,oneof"`
}
type MetricValue_StringValue struct {
	StringValue string `protobuf:"bytes,7,opt,name=string_value,json=stringValue,oneof"`
}
type MetricValue_DistributionValue struct {
	DistributionValue *Distribution `protobuf:"bytes,8,opt,name=distribution_value,json=distributionValue,oneof"`
}

func (*MetricValue_BoolValue) isMetricValue_Value()         {}
func (*MetricValue_Int64Value) isMetricValue_Value()        {}
func (*MetricValue_DoubleValue) isMetricValue_Value()       {}
func (*MetricValue_StringValue) isMetricValue_Value()       {}
func (*MetricValue_DistributionValue) isMetricValue_Value() {}

func (m *MetricValue) GetValue() isMetricValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *MetricValue) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *MetricValue) GetStartTime() *google_protobuf3.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *MetricValue) GetEndTime() *google_protobuf3.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *MetricValue) GetBoolValue() bool {
	if x, ok := m.GetValue().(*MetricValue_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (m *MetricValue) GetInt64Value() int64 {
	if x, ok := m.GetValue().(*MetricValue_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (m *MetricValue) GetDoubleValue() float64 {
	if x, ok := m.GetValue().(*MetricValue_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (m *MetricValue) GetStringValue() string {
	if x, ok := m.GetValue().(*MetricValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *MetricValue) GetDistributionValue() *Distribution {
	if x, ok := m.GetValue().(*MetricValue_DistributionValue); ok {
		return x.DistributionValue
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*MetricValue) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _MetricValue_OneofMarshaler, _MetricValue_OneofUnmarshaler, _MetricValue_OneofSizer, []interface{}{
		(*MetricValue_BoolValue)(nil),
		(*MetricValue_Int64Value)(nil),
		(*MetricValue_DoubleValue)(nil),
		(*MetricValue_StringValue)(nil),
		(*MetricValue_DistributionValue)(nil),
	}
}

func _MetricValue_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*MetricValue)
	// value
	switch x := m.Value.(type) {
	case *MetricValue_BoolValue:
		t := uint64(0)
		if x.BoolValue {
			t = 1
		}
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *MetricValue_Int64Value:
		b.EncodeVarint(5<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Int64Value))
	case *MetricValue_DoubleValue:
		b.EncodeVarint(6<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.DoubleValue))
	case *MetricValue_StringValue:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.StringValue)
	case *MetricValue_DistributionValue:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DistributionValue); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("MetricValue.Value has unexpected type %T", x)
	}
	return nil
}

func _MetricValue_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*MetricValue)
	switch tag {
	case 4: // value.bool_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &MetricValue_BoolValue{x != 0}
		return true, err
	case 5: // value.int64_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &MetricValue_Int64Value{int64(x)}
		return true, err
	case 6: // value.double_value
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Value = &MetricValue_DoubleValue{math.Float64frombits(x)}
		return true, err
	case 7: // value.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &MetricValue_StringValue{x}
		return true, err
	case 8: // value.distribution_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Distribution)
		err := b.DecodeMessage(msg)
		m.Value = &MetricValue_DistributionValue{msg}
		return true, err
	default:
		return false, nil
	}
}

func _MetricValue_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*MetricValue)
	// value
	switch x := m.Value.(type) {
	case *MetricValue_BoolValue:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += 1
	case *MetricValue_Int64Value:
		n += proto.SizeVarint(5<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Int64Value))
	case *MetricValue_DoubleValue:
		n += proto.SizeVarint(6<<3 | proto.WireFixed64)
		n += 8
	case *MetricValue_StringValue:
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.StringValue)))
		n += len(x.StringValue)
	case *MetricValue_DistributionValue:
		s := proto.Size(x.DistributionValue)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Represents a set of metric values in the same metric.
// Each metric value in the set should have a unique combination of start time,
// end time, and label values.
type MetricValueSet struct {
	// The metric name defined in the service configuration.
	MetricName string `protobuf:"bytes,1,opt,name=metric_name,json=metricName" json:"metric_name,omitempty"`
	// The values in this metric.
	MetricValues []*MetricValue `protobuf:"bytes,2,rep,name=metric_values,json=metricValues" json:"metric_values,omitempty"`
}

func (m *MetricValueSet) Reset()                    { *m = MetricValueSet{} }
func (m *MetricValueSet) String() string            { return proto.CompactTextString(m) }
func (*MetricValueSet) ProtoMessage()               {}
func (*MetricValueSet) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *MetricValueSet) GetMetricValues() []*MetricValue {
	if m != nil {
		return m.MetricValues
	}
	return nil
}

func init() {
	proto.RegisterType((*MetricValue)(nil), "google.api.servicecontrol.v1.MetricValue")
	proto.RegisterType((*MetricValueSet)(nil), "google.api.servicecontrol.v1.MetricValueSet")
}

func init() {
	proto.RegisterFile("google.golang.org/genproto/googleapis/api/servicecontrol/v1/metric_value.proto", fileDescriptor3)
}

var fileDescriptor3 = []byte{
	// 488 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x93, 0xcf, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x49, 0xc3, 0xfa, 0xe3, 0x65, 0x20, 0x08, 0x1c, 0xaa, 0x0a, 0x89, 0x32, 0x2e, 0xc0,
	0xc1, 0xd6, 0x80, 0x21, 0x06, 0x3b, 0x55, 0x20, 0x81, 0xc4, 0xaa, 0x29, 0x20, 0x2e, 0x1c, 0xa6,
	0xa4, 0xf5, 0x8c, 0x45, 0x62, 0x47, 0xb1, 0x53, 0xa9, 0x47, 0xfe, 0x6b, 0x2e, 0x48, 0x3c, 0xff,
	0x28, 0xcb, 0x2e, 0xa5, 0x62, 0x97, 0x28, 0x7e, 0xfe, 0x7c, 0xbf, 0x7e, 0x7e, 0xef, 0x19, 0xe6,
	0x5c, 0x29, 0x5e, 0x32, 0xc2, 0x55, 0x99, 0x4b, 0x4e, 0x54, 0xc3, 0x29, 0x67, 0xb2, 0x6e, 0x94,
	0x51, 0xd4, 0x6f, 0xe5, 0xb5, 0xd0, 0x14, 0x3f, 0x54, 0xb3, 0x66, 0x25, 0x16, 0x6c, 0xa1, 0xa4,
	0x69, 0x54, 0x49, 0x57, 0x87, 0xb4, 0x62, 0xa6, 0x11, 0x8b, 0xf3, 0x55, 0x5e, 0xb6, 0x8c, 0x38,
	0x4d, 0xfa, 0x20, 0xf8, 0xa1, 0x80, 0x5c, 0x15, 0x90, 0xd5, 0xe1, 0xe4, 0xe3, 0xff, 0x9c, 0x76,
	0x21, 0x38, 0xcd, 0xa5, 0x54, 0x26, 0x37, 0x42, 0x49, 0xed, 0x0f, 0x9a, 0x5c, 0x2b, 0xf1, 0xa5,
	0xd0, 0x98, 0x79, 0xd1, 0x5a, 0xc3, 0xe0, 0xf7, 0x96, 0x0b, 0xf3, 0xbd, 0x2d, 0xc8, 0x42, 0x55,
	0xd4, 0x7b, 0x52, 0xb7, 0x51, 0xb4, 0x17, 0xb4, 0x36, 0xeb, 0x9a, 0x69, 0x6a, 0x44, 0xc5, 0xb4,
	0xc9, 0xab, 0xfa, 0xf2, 0x2f, 0x88, 0x4f, 0x76, 0x4b, 0xc6, 0xda, 0xd0, 0x4a, 0x49, 0xb6, 0xf6,
	0x5f, 0xaf, 0x3e, 0xf8, 0x1d, 0x43, 0x72, 0xea, 0x4a, 0xf9, 0xd5, 0x56, 0x32, 0x3d, 0x85, 0x7e,
	0x99, 0x17, 0xac, 0xd4, 0xe3, 0x68, 0x1a, 0x3f, 0x49, 0x9e, 0x1f, 0x91, 0x6d, 0x45, 0x25, 0x1d,
	0x29, 0xf9, 0xe4, 0x74, 0xef, 0x71, 0x6f, 0x9d, 0x05, 0x93, 0xf4, 0x18, 0x00, 0x73, 0x6d, 0xcc,
	0xb9, 0xcd, 0x7a, 0xdc, 0x9b, 0x46, 0x68, 0x39, 0xd9, 0x58, 0x6e, 0xee, 0x48, 0xbe, 0x6c, 0xae,
	0x94, 0x8d, 0x1c, 0x6d, 0xd7, 0xe9, 0x11, 0x0c, 0x99, 0x5c, 0x7a, 0x61, 0xfc, 0x4f, 0xe1, 0x00,
	0x59, 0x27, 0x7b, 0x08, 0x50, 0x28, 0x55, 0xfa, 0xc1, 0x18, 0xdf, 0x44, 0xe1, 0xf0, 0xc3, 0x8d,
	0x6c, 0x64, 0x63, 0xfe, 0x86, 0x8f, 0x20, 0x11, 0xd2, 0xbc, 0x7a, 0x19, 0x88, 0x3d, 0x24, 0x62,
	0x24, 0xc0, 0x05, 0x3d, 0xf2, 0x18, 0xf6, 0x97, 0xaa, 0x2d, 0x4a, 0x16, 0x98, 0x3e, 0x32, 0x11,
	0x32, 0x89, 0x8f, 0xfe, 0x85, 0x6c, 0x23, 0x25, 0x0f, 0xd0, 0x00, 0xa1, 0x91, 0x85, 0x7c, 0xd4,
	0x43, 0xdf, 0x20, 0xed, 0xf6, 0x3b, 0xa0, 0x43, 0x77, 0x9d, 0x67, 0xdb, 0x4b, 0xfb, 0xae, 0xa3,
	0x43, 0xdb, 0xbb, 0x5d, 0x1f, 0x67, 0x3e, 0x39, 0x86, 0xa4, 0x53, 0xf3, 0xf4, 0x0e, 0xc4, 0x3f,
	0xd8, 0x1a, 0xfb, 0x86, 0x79, 0x64, 0xf6, 0x37, 0xbd, 0x0f, 0x7b, 0xfe, 0xc0, 0x9e, 0x8b, 0xf9,
	0xc5, 0x9b, 0xde, 0xeb, 0x68, 0x36, 0x08, 0x3b, 0x07, 0x3f, 0x23, 0xb8, 0xdd, 0x69, 0xe2, 0x67,
	0x66, 0xb0, 0x82, 0x49, 0x78, 0x5c, 0x32, 0xc7, 0xda, 0x7b, 0x3f, 0xf0, 0xa1, 0x39, 0x46, 0xd2,
	0x39, 0xdc, 0xea, 0xbe, 0x3e, 0x8d, 0xf6, 0x76, 0x54, 0x9e, 0xee, 0x3c, 0x2a, 0xd9, 0x7e, 0x75,
	0xb9, 0xd0, 0xb3, 0x13, 0x98, 0xe2, 0xe4, 0x6f, 0x55, 0xcf, 0xee, 0x5d, 0x4d, 0xf2, 0xcc, 0x4e,
	0xc0, 0x59, 0xf4, 0x2b, 0x8a, 0x8a, 0xbe, 0x9b, 0x86, 0x17, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xde, 0xbe, 0xad, 0x24, 0x4e, 0x04, 0x00, 0x00,
}
