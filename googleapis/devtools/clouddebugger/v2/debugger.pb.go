// Code generated by protoc-gen-go.
// source: google.golang.org/genproto/googleapis/devtools/clouddebugger/v2/debugger.proto
// DO NOT EDIT!

package google_devtools_clouddebugger_v2 // import "google.golang.org/genproto/googleapis/devtools/clouddebugger/v2"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/serviceconfig"
import google_protobuf3 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Request to set a breakpoint
type SetBreakpointRequest struct {
	// ID of the debuggee where the breakpoint is to be set.
	DebuggeeId string `protobuf:"bytes,1,opt,name=debuggee_id,json=debuggeeId" json:"debuggee_id,omitempty"`
	// Breakpoint specification to set.
	// The field 'location' of the breakpoint must be set.
	Breakpoint *Breakpoint `protobuf:"bytes,2,opt,name=breakpoint" json:"breakpoint,omitempty"`
	// The client version making the call.
	// Following: `domain/type/version` (e.g., `google.com/intellij/v1`).
	ClientVersion string `protobuf:"bytes,4,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
}

func (m *SetBreakpointRequest) Reset()                    { *m = SetBreakpointRequest{} }
func (m *SetBreakpointRequest) String() string            { return proto.CompactTextString(m) }
func (*SetBreakpointRequest) ProtoMessage()               {}
func (*SetBreakpointRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *SetBreakpointRequest) GetBreakpoint() *Breakpoint {
	if m != nil {
		return m.Breakpoint
	}
	return nil
}

// Response for setting a breakpoint.
type SetBreakpointResponse struct {
	// Breakpoint resource.
	// The field `id` is guaranteed to be set (in addition to the echoed fileds).
	Breakpoint *Breakpoint `protobuf:"bytes,1,opt,name=breakpoint" json:"breakpoint,omitempty"`
}

func (m *SetBreakpointResponse) Reset()                    { *m = SetBreakpointResponse{} }
func (m *SetBreakpointResponse) String() string            { return proto.CompactTextString(m) }
func (*SetBreakpointResponse) ProtoMessage()               {}
func (*SetBreakpointResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *SetBreakpointResponse) GetBreakpoint() *Breakpoint {
	if m != nil {
		return m.Breakpoint
	}
	return nil
}

// Request to get breakpoint information.
type GetBreakpointRequest struct {
	// ID of the debuggee whose breakpoint to get.
	DebuggeeId string `protobuf:"bytes,1,opt,name=debuggee_id,json=debuggeeId" json:"debuggee_id,omitempty"`
	// ID of the breakpoint to get.
	BreakpointId string `protobuf:"bytes,2,opt,name=breakpoint_id,json=breakpointId" json:"breakpoint_id,omitempty"`
	// The client version making the call.
	// Following: `domain/type/version` (e.g., `google.com/intellij/v1`).
	ClientVersion string `protobuf:"bytes,4,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
}

func (m *GetBreakpointRequest) Reset()                    { *m = GetBreakpointRequest{} }
func (m *GetBreakpointRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBreakpointRequest) ProtoMessage()               {}
func (*GetBreakpointRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

// Response for getting breakpoint information.
type GetBreakpointResponse struct {
	// Complete breakpoint state.
	// The fields `id` and `location` are guaranteed to be set.
	Breakpoint *Breakpoint `protobuf:"bytes,1,opt,name=breakpoint" json:"breakpoint,omitempty"`
}

func (m *GetBreakpointResponse) Reset()                    { *m = GetBreakpointResponse{} }
func (m *GetBreakpointResponse) String() string            { return proto.CompactTextString(m) }
func (*GetBreakpointResponse) ProtoMessage()               {}
func (*GetBreakpointResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *GetBreakpointResponse) GetBreakpoint() *Breakpoint {
	if m != nil {
		return m.Breakpoint
	}
	return nil
}

// Request to delete a breakpoint.
type DeleteBreakpointRequest struct {
	// ID of the debuggee whose breakpoint to delete.
	DebuggeeId string `protobuf:"bytes,1,opt,name=debuggee_id,json=debuggeeId" json:"debuggee_id,omitempty"`
	// ID of the breakpoint to delete.
	BreakpointId string `protobuf:"bytes,2,opt,name=breakpoint_id,json=breakpointId" json:"breakpoint_id,omitempty"`
	// The client version making the call.
	// Following: `domain/type/version` (e.g., `google.com/intellij/v1`).
	ClientVersion string `protobuf:"bytes,3,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
}

func (m *DeleteBreakpointRequest) Reset()                    { *m = DeleteBreakpointRequest{} }
func (m *DeleteBreakpointRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteBreakpointRequest) ProtoMessage()               {}
func (*DeleteBreakpointRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

// Request to list breakpoints.
type ListBreakpointsRequest struct {
	// ID of the debuggee whose breakpoints to list.
	DebuggeeId string `protobuf:"bytes,1,opt,name=debuggee_id,json=debuggeeId" json:"debuggee_id,omitempty"`
	// When set to `true`, the response includes the list of breakpoints set by
	// any user. Otherwise, it includes only breakpoints set by the caller.
	IncludeAllUsers bool `protobuf:"varint,2,opt,name=include_all_users,json=includeAllUsers" json:"include_all_users,omitempty"`
	// When set to `true`, the response includes active and inactive
	// breakpoints. Otherwise, it includes only active breakpoints.
	IncludeInactive bool `protobuf:"varint,3,opt,name=include_inactive,json=includeInactive" json:"include_inactive,omitempty"`
	// When set, the response includes only breakpoints with the specified action.
	Action *ListBreakpointsRequest_BreakpointActionValue `protobuf:"bytes,4,opt,name=action" json:"action,omitempty"`
	// When set to `true`, the response breakpoints are stripped of the
	// results fields: `stack_frames`, `evaluated_expressions` and
	// `variable_table`.
	StripResults bool `protobuf:"varint,5,opt,name=strip_results,json=stripResults" json:"strip_results,omitempty"`
	// A wait token that, if specified, blocks the call until the breakpoints
	// list has changed, or a server selected timeout has expired.  The value
	// should be set from the last response. The error code
	// `google.rpc.Code.ABORTED` (RPC) is returned on wait timeout, which
	// should be called again with the same `wait_token`.
	WaitToken string `protobuf:"bytes,6,opt,name=wait_token,json=waitToken" json:"wait_token,omitempty"`
	// The client version making the call.
	// Following: `domain/type/version` (e.g., `google.com/intellij/v1`).
	ClientVersion string `protobuf:"bytes,8,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
}

func (m *ListBreakpointsRequest) Reset()                    { *m = ListBreakpointsRequest{} }
func (m *ListBreakpointsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListBreakpointsRequest) ProtoMessage()               {}
func (*ListBreakpointsRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *ListBreakpointsRequest) GetAction() *ListBreakpointsRequest_BreakpointActionValue {
	if m != nil {
		return m.Action
	}
	return nil
}

// Wrapper message for `Breakpoint.Action`. Defines a filter on the action
// field of breakpoints.
type ListBreakpointsRequest_BreakpointActionValue struct {
	// Only breakpoints with the specified action will pass the filter.
	Value Breakpoint_Action `protobuf:"varint,1,opt,name=value,enum=google.devtools.clouddebugger.v2.Breakpoint_Action" json:"value,omitempty"`
}

func (m *ListBreakpointsRequest_BreakpointActionValue) Reset() {
	*m = ListBreakpointsRequest_BreakpointActionValue{}
}
func (m *ListBreakpointsRequest_BreakpointActionValue) String() string {
	return proto.CompactTextString(m)
}
func (*ListBreakpointsRequest_BreakpointActionValue) ProtoMessage() {}
func (*ListBreakpointsRequest_BreakpointActionValue) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{5, 0}
}

// Response for listing breakpoints.
type ListBreakpointsResponse struct {
	// List of all breakpoints with complete state.
	// The fields `id` and `location` are guaranteed to be set on each breakpoint.
	Breakpoints []*Breakpoint `protobuf:"bytes,1,rep,name=breakpoints" json:"breakpoints,omitempty"`
	// A wait token that can be used in the next call to `list` (REST) or
	// `ListBreakpoints` (RPC) to block until the list of breakpoints has changes.
	NextWaitToken string `protobuf:"bytes,2,opt,name=next_wait_token,json=nextWaitToken" json:"next_wait_token,omitempty"`
}

func (m *ListBreakpointsResponse) Reset()                    { *m = ListBreakpointsResponse{} }
func (m *ListBreakpointsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListBreakpointsResponse) ProtoMessage()               {}
func (*ListBreakpointsResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *ListBreakpointsResponse) GetBreakpoints() []*Breakpoint {
	if m != nil {
		return m.Breakpoints
	}
	return nil
}

// Request to list debuggees.
type ListDebuggeesRequest struct {
	// Project number of a Google Cloud project whose debuggees to list.
	Project string `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
	// When set to `true`, the result includes all debuggees. Otherwise, the
	// result includes only debuggees that are active.
	IncludeInactive bool `protobuf:"varint,3,opt,name=include_inactive,json=includeInactive" json:"include_inactive,omitempty"`
	// The client version making the call.
	// Following: `domain/type/version` (e.g., `google.com/intellij/v1`).
	ClientVersion string `protobuf:"bytes,4,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
}

func (m *ListDebuggeesRequest) Reset()                    { *m = ListDebuggeesRequest{} }
func (m *ListDebuggeesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListDebuggeesRequest) ProtoMessage()               {}
func (*ListDebuggeesRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

// Response for listing debuggees.
type ListDebuggeesResponse struct {
	// List of debuggees accessible to the calling user.
	// Note that the `description` field is the only human readable field
	// that should be displayed to the user.
	// The fields `debuggee.id` and  `description` fields are guaranteed to be
	// set on each debuggee.
	Debuggees []*Debuggee `protobuf:"bytes,1,rep,name=debuggees" json:"debuggees,omitempty"`
}

func (m *ListDebuggeesResponse) Reset()                    { *m = ListDebuggeesResponse{} }
func (m *ListDebuggeesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListDebuggeesResponse) ProtoMessage()               {}
func (*ListDebuggeesResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *ListDebuggeesResponse) GetDebuggees() []*Debuggee {
	if m != nil {
		return m.Debuggees
	}
	return nil
}

func init() {
	proto.RegisterType((*SetBreakpointRequest)(nil), "google.devtools.clouddebugger.v2.SetBreakpointRequest")
	proto.RegisterType((*SetBreakpointResponse)(nil), "google.devtools.clouddebugger.v2.SetBreakpointResponse")
	proto.RegisterType((*GetBreakpointRequest)(nil), "google.devtools.clouddebugger.v2.GetBreakpointRequest")
	proto.RegisterType((*GetBreakpointResponse)(nil), "google.devtools.clouddebugger.v2.GetBreakpointResponse")
	proto.RegisterType((*DeleteBreakpointRequest)(nil), "google.devtools.clouddebugger.v2.DeleteBreakpointRequest")
	proto.RegisterType((*ListBreakpointsRequest)(nil), "google.devtools.clouddebugger.v2.ListBreakpointsRequest")
	proto.RegisterType((*ListBreakpointsRequest_BreakpointActionValue)(nil), "google.devtools.clouddebugger.v2.ListBreakpointsRequest.BreakpointActionValue")
	proto.RegisterType((*ListBreakpointsResponse)(nil), "google.devtools.clouddebugger.v2.ListBreakpointsResponse")
	proto.RegisterType((*ListDebuggeesRequest)(nil), "google.devtools.clouddebugger.v2.ListDebuggeesRequest")
	proto.RegisterType((*ListDebuggeesResponse)(nil), "google.devtools.clouddebugger.v2.ListDebuggeesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Debugger2 service

type Debugger2Client interface {
	// Sets the breakpoint to the debuggee.
	SetBreakpoint(ctx context.Context, in *SetBreakpointRequest, opts ...grpc.CallOption) (*SetBreakpointResponse, error)
	// Gets breakpoint information.
	GetBreakpoint(ctx context.Context, in *GetBreakpointRequest, opts ...grpc.CallOption) (*GetBreakpointResponse, error)
	// Deletes the breakpoint from the debuggee.
	DeleteBreakpoint(ctx context.Context, in *DeleteBreakpointRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
	// Lists all breakpoints for the debuggee.
	ListBreakpoints(ctx context.Context, in *ListBreakpointsRequest, opts ...grpc.CallOption) (*ListBreakpointsResponse, error)
	// Lists all the debuggees that the user can set breakpoints to.
	ListDebuggees(ctx context.Context, in *ListDebuggeesRequest, opts ...grpc.CallOption) (*ListDebuggeesResponse, error)
}

type debugger2Client struct {
	cc *grpc.ClientConn
}

func NewDebugger2Client(cc *grpc.ClientConn) Debugger2Client {
	return &debugger2Client{cc}
}

func (c *debugger2Client) SetBreakpoint(ctx context.Context, in *SetBreakpointRequest, opts ...grpc.CallOption) (*SetBreakpointResponse, error) {
	out := new(SetBreakpointResponse)
	err := grpc.Invoke(ctx, "/google.devtools.clouddebugger.v2.Debugger2/SetBreakpoint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugger2Client) GetBreakpoint(ctx context.Context, in *GetBreakpointRequest, opts ...grpc.CallOption) (*GetBreakpointResponse, error) {
	out := new(GetBreakpointResponse)
	err := grpc.Invoke(ctx, "/google.devtools.clouddebugger.v2.Debugger2/GetBreakpoint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugger2Client) DeleteBreakpoint(ctx context.Context, in *DeleteBreakpointRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/google.devtools.clouddebugger.v2.Debugger2/DeleteBreakpoint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugger2Client) ListBreakpoints(ctx context.Context, in *ListBreakpointsRequest, opts ...grpc.CallOption) (*ListBreakpointsResponse, error) {
	out := new(ListBreakpointsResponse)
	err := grpc.Invoke(ctx, "/google.devtools.clouddebugger.v2.Debugger2/ListBreakpoints", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugger2Client) ListDebuggees(ctx context.Context, in *ListDebuggeesRequest, opts ...grpc.CallOption) (*ListDebuggeesResponse, error) {
	out := new(ListDebuggeesResponse)
	err := grpc.Invoke(ctx, "/google.devtools.clouddebugger.v2.Debugger2/ListDebuggees", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Debugger2 service

type Debugger2Server interface {
	// Sets the breakpoint to the debuggee.
	SetBreakpoint(context.Context, *SetBreakpointRequest) (*SetBreakpointResponse, error)
	// Gets breakpoint information.
	GetBreakpoint(context.Context, *GetBreakpointRequest) (*GetBreakpointResponse, error)
	// Deletes the breakpoint from the debuggee.
	DeleteBreakpoint(context.Context, *DeleteBreakpointRequest) (*google_protobuf3.Empty, error)
	// Lists all breakpoints for the debuggee.
	ListBreakpoints(context.Context, *ListBreakpointsRequest) (*ListBreakpointsResponse, error)
	// Lists all the debuggees that the user can set breakpoints to.
	ListDebuggees(context.Context, *ListDebuggeesRequest) (*ListDebuggeesResponse, error)
}

func RegisterDebugger2Server(s *grpc.Server, srv Debugger2Server) {
	s.RegisterService(&_Debugger2_serviceDesc, srv)
}

func _Debugger2_SetBreakpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBreakpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Debugger2Server).SetBreakpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.devtools.clouddebugger.v2.Debugger2/SetBreakpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Debugger2Server).SetBreakpoint(ctx, req.(*SetBreakpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debugger2_GetBreakpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBreakpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Debugger2Server).GetBreakpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.devtools.clouddebugger.v2.Debugger2/GetBreakpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Debugger2Server).GetBreakpoint(ctx, req.(*GetBreakpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debugger2_DeleteBreakpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBreakpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Debugger2Server).DeleteBreakpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.devtools.clouddebugger.v2.Debugger2/DeleteBreakpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Debugger2Server).DeleteBreakpoint(ctx, req.(*DeleteBreakpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debugger2_ListBreakpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBreakpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Debugger2Server).ListBreakpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.devtools.clouddebugger.v2.Debugger2/ListBreakpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Debugger2Server).ListBreakpoints(ctx, req.(*ListBreakpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debugger2_ListDebuggees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDebuggeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Debugger2Server).ListDebuggees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.devtools.clouddebugger.v2.Debugger2/ListDebuggees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Debugger2Server).ListDebuggees(ctx, req.(*ListDebuggeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Debugger2_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.devtools.clouddebugger.v2.Debugger2",
	HandlerType: (*Debugger2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetBreakpoint",
			Handler:    _Debugger2_SetBreakpoint_Handler,
		},
		{
			MethodName: "GetBreakpoint",
			Handler:    _Debugger2_GetBreakpoint_Handler,
		},
		{
			MethodName: "DeleteBreakpoint",
			Handler:    _Debugger2_DeleteBreakpoint_Handler,
		},
		{
			MethodName: "ListBreakpoints",
			Handler:    _Debugger2_ListBreakpoints_Handler,
		},
		{
			MethodName: "ListDebuggees",
			Handler:    _Debugger2_ListDebuggees_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor2,
}

func init() {
	proto.RegisterFile("google.golang.org/genproto/googleapis/devtools/clouddebugger/v2/debugger.proto", fileDescriptor2)
}

var fileDescriptor2 = []byte{
	// 784 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x56, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0x96, 0xdb, 0xdb, 0x9f, 0x9c, 0x34, 0x6d, 0xef, 0xe8, 0xb6, 0x37, 0x8a, 0x74, 0x2f, 0x95,
	0xf9, 0x11, 0x54, 0xc8, 0x83, 0x5c, 0x44, 0x5b, 0x56, 0x34, 0x2a, 0x4a, 0x83, 0xaa, 0xaa, 0x0a,
	0x50, 0x96, 0x91, 0xe3, 0x9c, 0x1a, 0x53, 0xd7, 0x13, 0x3c, 0xe3, 0x00, 0xaa, 0xba, 0x29, 0x12,
	0x7b, 0xc4, 0x0b, 0xf0, 0x00, 0x48, 0x3c, 0x01, 0x12, 0x3b, 0x24, 0xb6, 0xbc, 0x02, 0x0f, 0xc2,
	0xf8, 0xaf, 0x71, 0x82, 0x45, 0xe2, 0x54, 0xea, 0xc6, 0x9a, 0x9c, 0x99, 0x73, 0xe6, 0xfb, 0xbe,
	0xf9, 0xce, 0x4c, 0x60, 0xcf, 0x62, 0xcc, 0x72, 0x50, 0xb3, 0x98, 0x63, 0xb8, 0x96, 0xc6, 0x3c,
	0x8b, 0x5a, 0xe8, 0x76, 0x3c, 0x26, 0x18, 0x8d, 0xa6, 0x8c, 0x8e, 0xcd, 0x69, 0x1b, 0xbb, 0x82,
	0x31, 0x87, 0x53, 0xd3, 0x61, 0x7e, 0xbb, 0x8d, 0x2d, 0xdf, 0xb2, 0xd0, 0xa3, 0x5d, 0x9d, 0x26,
	0x63, 0x2d, 0xcc, 0x21, 0x2b, 0x71, 0xbd, 0x24, 0x41, 0xeb, 0x4b, 0xd0, 0xba, 0x7a, 0xa5, 0x3e,
	0xda, 0x8e, 0xf2, 0x43, 0x39, 0x7a, 0x5d, 0xdb, 0x44, 0x93, 0xb9, 0x87, 0xb6, 0x45, 0x0d, 0xd7,
	0x65, 0xc2, 0x10, 0x36, 0x73, 0x79, 0xb4, 0x59, 0xe5, 0xd1, 0x85, 0xc1, 0x1b, 0xc2, 0x88, 0x6b,
	0xad, 0x59, 0xb6, 0x78, 0xee, 0xb7, 0x34, 0x93, 0x1d, 0xd3, 0xa8, 0x1e, 0x0d, 0x27, 0x5a, 0xfe,
	0x21, 0xed, 0x88, 0x37, 0x1d, 0xe4, 0x14, 0x8f, 0xe5, 0x20, 0xfa, 0x46, 0x49, 0xea, 0x27, 0x05,
	0xfe, 0x79, 0x8c, 0xa2, 0xea, 0xa1, 0x71, 0xd4, 0x61, 0xb6, 0x2b, 0x1a, 0xf8, 0xd2, 0x47, 0x2e,
	0xc8, 0x15, 0x28, 0xc6, 0xfb, 0x60, 0xd3, 0x6e, 0x97, 0x95, 0x15, 0xe5, 0x66, 0xa1, 0x01, 0x49,
	0xa8, 0xde, 0x26, 0xbb, 0x00, 0xad, 0xf3, 0xac, 0xf2, 0x84, 0x9c, 0x2f, 0xea, 0xb7, 0xb5, 0x61,
	0xe2, 0x69, 0xa9, 0x9d, 0x52, 0xf9, 0xe4, 0x3a, 0xcc, 0x9b, 0x8e, 0x8d, 0xae, 0x68, 0x76, 0xd1,
	0xe3, 0x52, 0xa1, 0xf2, 0x5f, 0xe1, 0x8e, 0xa5, 0x28, 0x7a, 0x10, 0x05, 0x55, 0x84, 0xa5, 0x01,
	0xb4, 0xbc, 0x23, 0xd5, 0xc4, 0x01, 0x34, 0xca, 0xc5, 0xd0, 0xa8, 0x6f, 0xa5, 0x2a, 0xb5, 0xb1,
	0x54, 0xb9, 0x0a, 0xa5, 0x5e, 0x9d, 0x60, 0xc9, 0x44, 0xb8, 0x64, 0xae, 0x17, 0x94, 0x8b, 0x46,
	0x27, 0x5b, 0xbb, 0x04, 0xb2, 0xef, 0x14, 0xf8, 0x77, 0x1b, 0x1d, 0x14, 0x78, 0x79, 0x7c, 0x27,
	0xb3, 0xf8, 0x7e, 0x9b, 0x84, 0xe5, 0x5d, 0x9b, 0xa7, 0x18, 0xf3, 0x91, 0x71, 0xac, 0xc2, 0xdf,
	0xb6, 0x6b, 0x3a, 0x7e, 0x1b, 0x9b, 0x86, 0xe3, 0x34, 0x7d, 0xd9, 0x78, 0x3c, 0xc4, 0x32, 0xdb,
	0x58, 0x88, 0x27, 0xb6, 0x1c, 0xe7, 0x69, 0x10, 0x26, 0xb7, 0x60, 0x31, 0x59, 0x6b, 0xbb, 0x86,
	0x29, 0xec, 0x2e, 0x86, 0x80, 0x7a, 0x4b, 0xeb, 0x71, 0x98, 0x1c, 0xc2, 0x74, 0x30, 0x8a, 0x4f,
	0xa8, 0xa8, 0xef, 0x0d, 0x57, 0x39, 0x9b, 0x41, 0x4a, 0xfc, 0xad, 0xb0, 0xe0, 0x81, 0xe1, 0xf8,
	0xd8, 0x88, 0xab, 0x07, 0x32, 0x72, 0xe1, 0xd9, 0x9d, 0xa6, 0x87, 0xdc, 0x77, 0x04, 0x2f, 0x4f,
	0x85, 0x78, 0xe6, 0xc2, 0x60, 0x23, 0x8a, 0x91, 0xff, 0x00, 0x5e, 0x19, 0xb6, 0x68, 0x0a, 0x76,
	0x84, 0x6e, 0x79, 0x3a, 0xd4, 0xa0, 0x10, 0x44, 0x9e, 0x04, 0x81, 0x0c, 0x95, 0x67, 0x33, 0x54,
	0xae, 0xb4, 0x60, 0x29, 0x13, 0x0b, 0xa9, 0xc3, 0x54, 0x37, 0x18, 0x84, 0xea, 0xce, 0xeb, 0x6b,
	0x79, 0x0c, 0xa5, 0x45, 0x85, 0x1a, 0x51, 0x05, 0xf5, 0xbd, 0xb4, 0xd4, 0x6f, 0x3a, 0xc4, 0xe6,
	0xdd, 0x83, 0x62, 0xcf, 0x1c, 0x5c, 0x6e, 0x36, 0x99, 0xdb, 0xbd, 0xe9, 0x02, 0xe4, 0x06, 0x2c,
	0xb8, 0xf8, 0x5a, 0x34, 0x53, 0xd2, 0x44, 0x1e, 0x2c, 0x05, 0xe1, 0x67, 0x89, 0x3c, 0xea, 0x99,
	0xec, 0xe9, 0x00, 0xd3, 0x76, 0x6c, 0x9a, 0x73, 0x6f, 0x95, 0x61, 0x46, 0xde, 0x85, 0x2f, 0xd0,
	0x14, 0x71, 0x62, 0xf2, 0x33, 0x8f, 0x51, 0x46, 0x6c, 0x69, 0x03, 0x96, 0x06, 0x30, 0xc4, 0xaa,
	0xec, 0x40, 0x21, 0x71, 0x73, 0xa2, 0xc9, 0xea, 0x70, 0x4d, 0x92, 0x3a, 0x8d, 0x5e, 0xb2, 0xfe,
	0x65, 0x06, 0x0a, 0x71, 0xdc, 0xd3, 0xc9, 0x77, 0x05, 0x4a, 0x7d, 0x37, 0x26, 0xb9, 0x37, 0xbc,
	0x6c, 0xd6, 0x83, 0x50, 0x59, 0xcf, 0x9d, 0x17, 0x51, 0x53, 0x77, 0xce, 0x7e, 0xfc, 0xfc, 0x30,
	0x51, 0x55, 0xef, 0xa6, 0x1f, 0x5b, 0x7a, 0x0e, 0x98, 0x9e, 0xa4, 0x3a, 0xfb, 0x94, 0xa6, 0x8e,
	0x56, 0xbe, 0x9e, 0xe2, 0x7e, 0xfa, 0x91, 0x08, 0xc8, 0xd4, 0xf2, 0x92, 0xa9, 0x8d, 0x49, 0xa6,
	0xf6, 0x27, 0x32, 0xe4, 0x41, 0x6e, 0x32, 0x27, 0x7d, 0xf7, 0xe4, 0x29, 0xf9, 0xac, 0xc0, 0xe2,
	0xe0, 0xb5, 0x4b, 0x36, 0x47, 0x39, 0xf3, 0xcc, 0xab, 0xba, 0xb2, 0x9c, 0xa4, 0x26, 0x8f, 0xbe,
	0xf6, 0x30, 0x78, 0xe7, 0x13, 0xc4, 0xab, 0x17, 0x47, 0xfc, 0x55, 0x81, 0x85, 0x81, 0xae, 0x26,
	0x1b, 0xe3, 0x5e, 0x88, 0x95, 0xcd, 0x31, 0x32, 0xe3, 0x43, 0xd8, 0x08, 0x29, 0xe9, 0xe4, 0x4e,
	0x5e, 0x4a, 0xe4, 0xa3, 0x74, 0x50, 0x5f, 0x03, 0x8e, 0xe2, 0xa0, 0xac, 0x5b, 0x63, 0x14, 0x07,
	0x65, 0x76, 0xba, 0xfa, 0x7f, 0x08, 0xbe, 0x4c, 0x96, 0xb3, 0xc1, 0x57, 0xd7, 0xe1, 0x9a, 0xfc,
	0x07, 0x37, 0xb4, 0x7a, 0xb5, 0x94, 0x34, 0xf9, 0x7e, 0x70, 0xde, 0xfb, 0x4a, 0x6b, 0x3a, 0x3c,
	0xf8, 0xb5, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb0, 0x05, 0x32, 0xe5, 0x11, 0x0b, 0x00, 0x00,
}
