// Code generated by protoc-gen-go.
// source: google.golang.org/genproto/googleapis/cloud/ml/v1beta1/prediction_service.proto
// DO NOT EDIT!

package google_cloud_ml_v1beta1 // import "google.golang.org/genproto/googleapis/cloud/ml/v1beta1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/serviceconfig"
import google_api2 "google.golang.org/genproto/googleapis/api/httpbody"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Request for predictions to be issued against a trained model.
//
// The body of the request is a single JSON object with a single top-level
// field:
//
// <dl>
//   <dt>instances</dt>
//   <dd>A JSON array containing values representing the instances to use for
//       prediction.</dd>
// </dl>
//
// The structure of each element of the instances list is determined by your
// model's input definition. Instances can include named inputs or can contain
// only unlabeled values.
//
// Most data does not include named inputs. Some instances will be simple
// JSON values (boolean, number, or string). However, instances are often lists
// of simple values, or complex nested lists. Here are some examples of request
// bodies:
//
// CSV data with each row encoded as a string value:
// <pre>
// {"instances": ["1.0,true,\\"x\\"", "-2.0,false,\\"y\\""]}
// </pre>
// Plain text:
// <pre>
// {"instances": ["the quick brown fox", "la bruja le dio"]}
// </pre>
// Sentences encoded as lists of words (vectors of strings):
// <pre>
// {"instances": [["the","quick","brown"], ["la","bruja","le"]]}
// </pre>
// Floating point scalar values:
// <pre>
// {"instances": [0.0, 1.1, 2.2]}
// </pre>
// Vectors of integers:
// <pre>
// {"instances": [[0, 1, 2], [3, 4, 5],...]}
// </pre>
// Tensors (in this case, two-dimensional tensors):
// <pre>
// {"instances": [[[0, 1, 2], [3, 4, 5]], ...]}
// </pre>
// Images represented as a three-dimensional list. In this encoding scheme the
// first two dimensions represent the rows and columns of the image, and the
// third contains the R, G, and B values for each pixel.
// <pre>
// {"instances": [[[[138, 30, 66], [130, 20, 56], ...]]]]}
// </pre>
// Data must be encoded as UTF-8. If your data uses another character encoding,
// you must base64 encode the data and mark it as binary. To mark a JSON string
// as binary, replace it with an object with a single attribute named `b`:
// <pre>{"b": "..."} </pre>
// For example:
//
// Two Serialized tf.Examples (fake data, for illustrative purposes only):
// <pre>
// {"instances": [{"b64": "X5ad6u"}, {"b64": "IA9j4nx"}]}
// </pre>
// Two JPEG image byte strings (fake data, for illustrative purposes only):
// <pre>
// {"instances": [{"b64": "ASa8asdf"}, {"b64": "JLK7ljk3"}]}
// </pre>
// If your data includes named references, format each instance as a JSON object
// with the named references as the keys:
//
// JSON input data to be preprocessed:
// <pre>
// {"instances": [{"a": 1.0,  "b": true,  "c": "x"},
//                {"a": -2.0, "b": false, "c": "y"}]}
// </pre>
// Some models have an underlying TensorFlow graph that accepts multiple input
// tensors. In this case, you should use the names of JSON name/value pairs to
// identify the input tensors, as shown in the following exmaples:
//
// For a graph with input tensor aliases "tag" (string) and "image"
// (base64-encoded string):
// <pre>
// {"instances": [{"tag": "beach", "image": {"b64": "ASa8asdf"}},
//                {"tag": "car", "image": {"b64": "JLK7ljk3"}}]}
// </pre>
// For a graph with input tensor aliases "tag" (string) and "image"
// (3-dimensional array of 8-bit ints):
// <pre>
// {"instances": [{"tag": "beach", "image": [[[263, 1, 10], [262, 2, 11], ...]]},
//                {"tag": "car", "image": [[[10, 11, 24], [23, 10, 15], ...]]}]}
// </pre>
// If the call is successful, the response body will contain one prediction
// entry per instance in the request body. If prediction fails for any
// instance, the response body will contain no predictions and will contian
// a single error entry instead.
type PredictRequest struct {
	// Required. The resource name of a model or a version.
	//
	// Authorization: requires `Viewer` role on the parent project.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	//
	// Required. The prediction request body.
	HttpBody *google_api2.HttpBody `protobuf:"bytes,2,opt,name=http_body,json=httpBody" json:"http_body,omitempty"`
}

func (m *PredictRequest) Reset()                    { *m = PredictRequest{} }
func (m *PredictRequest) String() string            { return proto.CompactTextString(m) }
func (*PredictRequest) ProtoMessage()               {}
func (*PredictRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *PredictRequest) GetHttpBody() *google_api2.HttpBody {
	if m != nil {
		return m.HttpBody
	}
	return nil
}

func init() {
	proto.RegisterType((*PredictRequest)(nil), "google.cloud.ml.v1beta1.PredictRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for OnlinePredictionService service

type OnlinePredictionServiceClient interface {
	// Performs prediction on the data in the request.
	//
	// Responses are very similar to requests. There are two top-level fields,
	// each of which are JSON lists:
	//
	// <dl>
	//   <dt>predictions</dt>
	//   <dd>The list of predictions, one per instance in the request.</dd>
	//   <dt>error</dt>
	//   <dd>An error message returned instead of a prediction list if any
	//       instance produced an error.</dd>
	// </dl>
	//
	// If the call is successful, the response body will contain one prediction
	// entry per instance in the request body. If prediction fails for any
	// instance, the response body will contain no predictions and will contian
	// a single error entry instead.
	//
	// Even though there is one prediction per instance, the format of a
	// prediction is not directly related to the format of an instance.
	// Predictions take whatever format is specified in the outputs collection
	// defined in the model. The collection of predictions is returned in a JSON
	// list. Each member of the list can be a simple value, a list, or a JSON
	// object of any complexity. If your model has more than one output tensor,
	// each prediction will be a JSON object containing a name/value pair for each
	// output. The names identify the output aliases in the graph.
	//
	// The following examples show some possible responses:
	//
	// A simple set of predictions for three input instances, where each
	// prediction is an integer value:
	// <pre>
	// {"predictions": [5, 4, 3]}
	// </pre>
	// A more complex set of predictions, each containing two named values that
	// correspond to output tensors, named **label** and **scores** respectively.
	// The value of **label** is the predicted category ("car" or "beach") and
	// **scores** contains a list of probabilities for that instance across the
	// possible categories.
	// <pre>
	// {"predictions": [{"label": "beach", "scores": [0.1, 0.9]},
	//                  {"label": "car", "scores": [0.75, 0.25]}]}
	// </pre>
	// A response when there is an error processing an input instance:
	// <pre>
	// {"error": "Divide by zero"}
	// </pre>
	Predict(ctx context.Context, in *PredictRequest, opts ...grpc.CallOption) (*google_api2.HttpBody, error)
}

type onlinePredictionServiceClient struct {
	cc *grpc.ClientConn
}

func NewOnlinePredictionServiceClient(cc *grpc.ClientConn) OnlinePredictionServiceClient {
	return &onlinePredictionServiceClient{cc}
}

func (c *onlinePredictionServiceClient) Predict(ctx context.Context, in *PredictRequest, opts ...grpc.CallOption) (*google_api2.HttpBody, error) {
	out := new(google_api2.HttpBody)
	err := grpc.Invoke(ctx, "/google.cloud.ml.v1beta1.OnlinePredictionService/Predict", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OnlinePredictionService service

type OnlinePredictionServiceServer interface {
	// Performs prediction on the data in the request.
	//
	// Responses are very similar to requests. There are two top-level fields,
	// each of which are JSON lists:
	//
	// <dl>
	//   <dt>predictions</dt>
	//   <dd>The list of predictions, one per instance in the request.</dd>
	//   <dt>error</dt>
	//   <dd>An error message returned instead of a prediction list if any
	//       instance produced an error.</dd>
	// </dl>
	//
	// If the call is successful, the response body will contain one prediction
	// entry per instance in the request body. If prediction fails for any
	// instance, the response body will contain no predictions and will contian
	// a single error entry instead.
	//
	// Even though there is one prediction per instance, the format of a
	// prediction is not directly related to the format of an instance.
	// Predictions take whatever format is specified in the outputs collection
	// defined in the model. The collection of predictions is returned in a JSON
	// list. Each member of the list can be a simple value, a list, or a JSON
	// object of any complexity. If your model has more than one output tensor,
	// each prediction will be a JSON object containing a name/value pair for each
	// output. The names identify the output aliases in the graph.
	//
	// The following examples show some possible responses:
	//
	// A simple set of predictions for three input instances, where each
	// prediction is an integer value:
	// <pre>
	// {"predictions": [5, 4, 3]}
	// </pre>
	// A more complex set of predictions, each containing two named values that
	// correspond to output tensors, named **label** and **scores** respectively.
	// The value of **label** is the predicted category ("car" or "beach") and
	// **scores** contains a list of probabilities for that instance across the
	// possible categories.
	// <pre>
	// {"predictions": [{"label": "beach", "scores": [0.1, 0.9]},
	//                  {"label": "car", "scores": [0.75, 0.25]}]}
	// </pre>
	// A response when there is an error processing an input instance:
	// <pre>
	// {"error": "Divide by zero"}
	// </pre>
	Predict(context.Context, *PredictRequest) (*google_api2.HttpBody, error)
}

func RegisterOnlinePredictionServiceServer(s *grpc.Server, srv OnlinePredictionServiceServer) {
	s.RegisterService(&_OnlinePredictionService_serviceDesc, srv)
}

func _OnlinePredictionService_Predict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlinePredictionServiceServer).Predict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.ml.v1beta1.OnlinePredictionService/Predict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlinePredictionServiceServer).Predict(ctx, req.(*PredictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OnlinePredictionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.ml.v1beta1.OnlinePredictionService",
	HandlerType: (*OnlinePredictionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Predict",
			Handler:    _OnlinePredictionService_Predict_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor3,
}

func init() {
	proto.RegisterFile("google.golang.org/genproto/googleapis/cloud/ml/v1beta1/prediction_service.proto", fileDescriptor3)
}

var fileDescriptor3 = []byte{
	// 314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x91, 0x41, 0x4b, 0xc3, 0x30,
	0x18, 0x86, 0xe9, 0x10, 0x75, 0x11, 0x3c, 0x04, 0x71, 0x63, 0x17, 0x65, 0x1e, 0x1c, 0x3b, 0x24,
	0x6c, 0xde, 0x26, 0x1e, 0xdc, 0x49, 0x4f, 0x2b, 0xf3, 0xe0, 0x71, 0xa4, 0x69, 0xcc, 0x22, 0x69,
	0xbe, 0xda, 0x66, 0x43, 0x11, 0x2f, 0xfe, 0x85, 0xfd, 0x34, 0xff, 0x82, 0x3f, 0xc4, 0xa4, 0x0d,
	0x05, 0x99, 0xc2, 0x2e, 0xe5, 0xa3, 0x2f, 0xef, 0xf3, 0x7e, 0xdf, 0x1b, 0x34, 0x93, 0x00, 0x52,
	0x0b, 0x22, 0x41, 0x33, 0x23, 0x09, 0x14, 0x92, 0x4a, 0x61, 0xf2, 0x02, 0x2c, 0xd0, 0x5a, 0x62,
	0xb9, 0x2a, 0x29, 0xd7, 0xb0, 0x4a, 0x69, 0xa6, 0xe9, 0x7a, 0x94, 0x08, 0xcb, 0x46, 0x34, 0x2f,
	0x44, 0xaa, 0xb8, 0x55, 0x60, 0x16, 0xa5, 0x28, 0xd6, 0x8a, 0x0b, 0x52, 0x99, 0x70, 0x27, 0x00,
	0x2b, 0x07, 0xc9, 0x34, 0x09, 0x8e, 0xde, 0xfd, 0x6e, 0x49, 0xee, 0x43, 0x03, 0x91, 0x83, 0x79,
	0x52, 0x92, 0x32, 0x63, 0xc0, 0x32, 0x1f, 0x55, 0xd6, 0x19, 0xbd, 0xdb, 0xdd, 0x51, 0x4b, 0x6b,
	0xf3, 0x04, 0xd2, 0xb7, 0x66, 0xa8, 0x11, 0xfd, 0x47, 0x74, 0x1c, 0xd7, 0x27, 0xcc, 0xc5, 0xcb,
	0x4a, 0x94, 0x16, 0x63, 0xb4, 0x67, 0x58, 0x26, 0xba, 0xd1, 0x79, 0x34, 0x68, 0xcf, 0xab, 0x19,
	0x8f, 0x50, 0xdb, 0xfb, 0x16, 0xde, 0xd8, 0x6d, 0x39, 0xe1, 0x68, 0x7c, 0x42, 0x42, 0xb8, 0xa3,
	0x93, 0x3b, 0x27, 0x4e, 0x9d, 0x36, 0x3f, 0x5c, 0x86, 0x69, 0xbc, 0x89, 0x50, 0x67, 0x66, 0xb4,
	0x32, 0x22, 0x6e, 0x2a, 0x7a, 0xa8, 0xef, 0xc1, 0xaf, 0xe8, 0x20, 0xfc, 0xc4, 0x97, 0xe4, 0x9f,
	0x9e, 0xc8, 0xef, 0xb5, 0x7a, 0x7f, 0xe6, 0xf5, 0xc9, 0xe7, 0xd7, 0xf7, 0xa6, 0x35, 0xe8, 0x5f,
	0x34, 0x0f, 0xf2, 0xee, 0x17, 0xbe, 0x71, 0xc7, 0x3d, 0x0b, 0x6e, 0x4b, 0x3a, 0x1c, 0x7e, 0x4c,
	0xc2, 0x1b, 0x4d, 0xa2, 0xe1, 0xf4, 0x1a, 0x9d, 0x71, 0xc8, 0xb6, 0x32, 0x3d, 0x33, 0x00, 0xa6,
	0xa7, 0x5b, 0xfb, 0xc6, 0xbe, 0xa9, 0x38, 0x4a, 0xf6, 0xab, 0xca, 0xae, 0x7e, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x22, 0x54, 0x5b, 0xa1, 0x2c, 0x02, 0x00, 0x00,
}
