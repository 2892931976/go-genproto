// Code generated by protoc-gen-go.
// source: google.golang.org/genproto/googleapis/cloud/language/v1beta1/language_service.proto
// DO NOT EDIT!

/*
Package google_cloud_language_v1beta1 is a generated protocol buffer package.

It is generated from these files:
	google.golang.org/genproto/googleapis/cloud/language/v1beta1/language_service.proto

It has these top-level messages:
	Document
	Sentence
	Entity
	Token
	Sentiment
	PartOfSpeech
	DependencyEdge
	EntityMention
	TextSpan
	AnalyzeSentimentRequest
	AnalyzeSentimentResponse
	AnalyzeEntitiesRequest
	AnalyzeEntitiesResponse
	AnnotateTextRequest
	AnnotateTextResponse
*/
package google_cloud_language_v1beta1 // import "google.golang.org/genproto/googleapis/cloud/language/v1beta1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/serviceconfig"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Represents the text encoding that the caller uses to process the output.
// Providing an `EncodingType` is recommended because the API provides the
// beginning offsets for various outputs, such as tokens and mentions, and
// languages that natively use different text encodings may access offsets
// differently.
type EncodingType int32

const (
	// If `EncodingType` is not specified, encoding-dependent information (such as
	// `begin_offset`) will be set at `-1`.
	EncodingType_NONE EncodingType = 0
	// Encoding-dependent information (such as `begin_offset`) is calculated based
	// on the UTF-8 encoding of the input. C++ and Go are examples of languages
	// that use this encoding natively.
	EncodingType_UTF8 EncodingType = 1
	// Encoding-dependent information (such as `begin_offset`) is calculated based
	// on the UTF-16 encoding of the input. Java and Javascript are examples of
	// languages that use this encoding natively.
	EncodingType_UTF16 EncodingType = 2
	// Encoding-dependent information (such as `begin_offset`) is calculated based
	// on the UTF-32 encoding of the input. Python is an example of a language
	// that uses this encoding natively.
	EncodingType_UTF32 EncodingType = 3
)

var EncodingType_name = map[int32]string{
	0: "NONE",
	1: "UTF8",
	2: "UTF16",
	3: "UTF32",
}
var EncodingType_value = map[string]int32{
	"NONE":  0,
	"UTF8":  1,
	"UTF16": 2,
	"UTF32": 3,
}

func (x EncodingType) String() string {
	return proto.EnumName(EncodingType_name, int32(x))
}
func (EncodingType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// The document types enum.
type Document_Type int32

const (
	// The content type is not specified.
	Document_TYPE_UNSPECIFIED Document_Type = 0
	// Plain text
	Document_PLAIN_TEXT Document_Type = 1
	// HTML
	Document_HTML Document_Type = 2
)

var Document_Type_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "PLAIN_TEXT",
	2: "HTML",
}
var Document_Type_value = map[string]int32{
	"TYPE_UNSPECIFIED": 0,
	"PLAIN_TEXT":       1,
	"HTML":             2,
}

func (x Document_Type) String() string {
	return proto.EnumName(Document_Type_name, int32(x))
}
func (Document_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

// The type of the entity.
type Entity_Type int32

const (
	// Unknown
	Entity_UNKNOWN Entity_Type = 0
	// Person
	Entity_PERSON Entity_Type = 1
	// Location
	Entity_LOCATION Entity_Type = 2
	// Organization
	Entity_ORGANIZATION Entity_Type = 3
	// Event
	Entity_EVENT Entity_Type = 4
	// Work of art
	Entity_WORK_OF_ART Entity_Type = 5
	// Consumer goods
	Entity_CONSUMER_GOOD Entity_Type = 6
	// Other types
	Entity_OTHER Entity_Type = 7
)

var Entity_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "PERSON",
	2: "LOCATION",
	3: "ORGANIZATION",
	4: "EVENT",
	5: "WORK_OF_ART",
	6: "CONSUMER_GOOD",
	7: "OTHER",
}
var Entity_Type_value = map[string]int32{
	"UNKNOWN":       0,
	"PERSON":        1,
	"LOCATION":      2,
	"ORGANIZATION":  3,
	"EVENT":         4,
	"WORK_OF_ART":   5,
	"CONSUMER_GOOD": 6,
	"OTHER":         7,
}

func (x Entity_Type) String() string {
	return proto.EnumName(Entity_Type_name, int32(x))
}
func (Entity_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

// The part of speech tags enum.
type PartOfSpeech_Tag int32

const (
	// Unknown
	PartOfSpeech_UNKNOWN PartOfSpeech_Tag = 0
	// Adjective
	PartOfSpeech_ADJ PartOfSpeech_Tag = 1
	// Adposition (preposition and postposition)
	PartOfSpeech_ADP PartOfSpeech_Tag = 2
	// Adverb
	PartOfSpeech_ADV PartOfSpeech_Tag = 3
	// Conjunction
	PartOfSpeech_CONJ PartOfSpeech_Tag = 4
	// Determiner
	PartOfSpeech_DET PartOfSpeech_Tag = 5
	// Noun (common and proper)
	PartOfSpeech_NOUN PartOfSpeech_Tag = 6
	// Cardinal number
	PartOfSpeech_NUM PartOfSpeech_Tag = 7
	// Pronoun
	PartOfSpeech_PRON PartOfSpeech_Tag = 8
	// Particle or other function word
	PartOfSpeech_PRT PartOfSpeech_Tag = 9
	// Punctuation
	PartOfSpeech_PUNCT PartOfSpeech_Tag = 10
	// Verb (all tenses and modes)
	PartOfSpeech_VERB PartOfSpeech_Tag = 11
	// Other: foreign words, typos, abbreviations
	PartOfSpeech_X PartOfSpeech_Tag = 12
	// Affix
	PartOfSpeech_AFFIX PartOfSpeech_Tag = 13
)

var PartOfSpeech_Tag_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "ADJ",
	2:  "ADP",
	3:  "ADV",
	4:  "CONJ",
	5:  "DET",
	6:  "NOUN",
	7:  "NUM",
	8:  "PRON",
	9:  "PRT",
	10: "PUNCT",
	11: "VERB",
	12: "X",
	13: "AFFIX",
}
var PartOfSpeech_Tag_value = map[string]int32{
	"UNKNOWN": 0,
	"ADJ":     1,
	"ADP":     2,
	"ADV":     3,
	"CONJ":    4,
	"DET":     5,
	"NOUN":    6,
	"NUM":     7,
	"PRON":    8,
	"PRT":     9,
	"PUNCT":   10,
	"VERB":    11,
	"X":       12,
	"AFFIX":   13,
}

func (x PartOfSpeech_Tag) String() string {
	return proto.EnumName(PartOfSpeech_Tag_name, int32(x))
}
func (PartOfSpeech_Tag) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

// The parse label enum for the token.
type DependencyEdge_Label int32

const (
	// Unknown
	DependencyEdge_UNKNOWN DependencyEdge_Label = 0
	// Abbreviation modifier
	DependencyEdge_ABBREV DependencyEdge_Label = 1
	// Adjectival complement
	DependencyEdge_ACOMP DependencyEdge_Label = 2
	// Adverbial clause modifier
	DependencyEdge_ADVCL DependencyEdge_Label = 3
	// Adverbial modifier
	DependencyEdge_ADVMOD DependencyEdge_Label = 4
	// Adjectival modifier of an NP
	DependencyEdge_AMOD DependencyEdge_Label = 5
	// Appositional modifier of an NP
	DependencyEdge_APPOS DependencyEdge_Label = 6
	// Attribute dependent of a copular verb
	DependencyEdge_ATTR DependencyEdge_Label = 7
	// Auxiliary (non-main) verb
	DependencyEdge_AUX DependencyEdge_Label = 8
	// Passive auxiliary
	DependencyEdge_AUXPASS DependencyEdge_Label = 9
	// Coordinating conjunction
	DependencyEdge_CC DependencyEdge_Label = 10
	// Clausal complement of a verb or adjective
	DependencyEdge_CCOMP DependencyEdge_Label = 11
	// Conjunct
	DependencyEdge_CONJ DependencyEdge_Label = 12
	// Clausal subject
	DependencyEdge_CSUBJ DependencyEdge_Label = 13
	// Clausal passive subject
	DependencyEdge_CSUBJPASS DependencyEdge_Label = 14
	// Dependency (unable to determine)
	DependencyEdge_DEP DependencyEdge_Label = 15
	// Determiner
	DependencyEdge_DET DependencyEdge_Label = 16
	// Discourse
	DependencyEdge_DISCOURSE DependencyEdge_Label = 17
	// Direct object
	DependencyEdge_DOBJ DependencyEdge_Label = 18
	// Expletive
	DependencyEdge_EXPL DependencyEdge_Label = 19
	// Goes with (part of a word in a text not well edited)
	DependencyEdge_GOESWITH DependencyEdge_Label = 20
	// Indirect object
	DependencyEdge_IOBJ DependencyEdge_Label = 21
	// Marker (word introducing a subordinate clause)
	DependencyEdge_MARK DependencyEdge_Label = 22
	// Multi-word expression
	DependencyEdge_MWE DependencyEdge_Label = 23
	// Multi-word verbal expression
	DependencyEdge_MWV DependencyEdge_Label = 24
	// Negation modifier
	DependencyEdge_NEG DependencyEdge_Label = 25
	// Noun compound modifier
	DependencyEdge_NN DependencyEdge_Label = 26
	// Noun phrase used as an adverbial modifier
	DependencyEdge_NPADVMOD DependencyEdge_Label = 27
	// Nominal subject
	DependencyEdge_NSUBJ DependencyEdge_Label = 28
	// Passive nominal subject
	DependencyEdge_NSUBJPASS DependencyEdge_Label = 29
	// Numeric modifier of a noun
	DependencyEdge_NUM DependencyEdge_Label = 30
	// Element of compound number
	DependencyEdge_NUMBER DependencyEdge_Label = 31
	// Punctuation mark
	DependencyEdge_P DependencyEdge_Label = 32
	// Parataxis relation
	DependencyEdge_PARATAXIS DependencyEdge_Label = 33
	// Participial modifier
	DependencyEdge_PARTMOD DependencyEdge_Label = 34
	// The complement of a preposition is a clause
	DependencyEdge_PCOMP DependencyEdge_Label = 35
	// Object of a preposition
	DependencyEdge_POBJ DependencyEdge_Label = 36
	// Possession modifier
	DependencyEdge_POSS DependencyEdge_Label = 37
	// Postverbal negative particle
	DependencyEdge_POSTNEG DependencyEdge_Label = 38
	// Predicate complement
	DependencyEdge_PRECOMP DependencyEdge_Label = 39
	// Preconjunt
	DependencyEdge_PRECONJ DependencyEdge_Label = 40
	// Predeterminer
	DependencyEdge_PREDET DependencyEdge_Label = 41
	// Prefix
	DependencyEdge_PREF DependencyEdge_Label = 42
	// Prepositional modifier
	DependencyEdge_PREP DependencyEdge_Label = 43
	// The relationship between a verb and verbal morpheme
	DependencyEdge_PRONL DependencyEdge_Label = 44
	// Particle
	DependencyEdge_PRT DependencyEdge_Label = 45
	// Associative or possessive marker
	DependencyEdge_PS DependencyEdge_Label = 46
	// Quantifier phrase modifier
	DependencyEdge_QUANTMOD DependencyEdge_Label = 47
	// Relative clause modifier
	DependencyEdge_RCMOD DependencyEdge_Label = 48
	// Complementizer in relative clause
	DependencyEdge_RCMODREL DependencyEdge_Label = 49
	// Ellipsis without a preceding predicate
	DependencyEdge_RDROP DependencyEdge_Label = 50
	// Referent
	DependencyEdge_REF DependencyEdge_Label = 51
	// Remnant
	DependencyEdge_REMNANT DependencyEdge_Label = 52
	// Reparandum
	DependencyEdge_REPARANDUM DependencyEdge_Label = 53
	// Root
	DependencyEdge_ROOT DependencyEdge_Label = 54
	// Suffix specifying a unit of number
	DependencyEdge_SNUM DependencyEdge_Label = 55
	// Suffix
	DependencyEdge_SUFF DependencyEdge_Label = 56
	// Temporal modifier
	DependencyEdge_TMOD DependencyEdge_Label = 57
	// Topic marker
	DependencyEdge_TOPIC DependencyEdge_Label = 58
	// Clause headed by an infinite form of the verb that modifies a noun
	DependencyEdge_VMOD DependencyEdge_Label = 59
	// Vocative
	DependencyEdge_VOCATIVE DependencyEdge_Label = 60
	// Open clausal complement
	DependencyEdge_XCOMP DependencyEdge_Label = 61
	// Name suffix
	DependencyEdge_SUFFIX DependencyEdge_Label = 62
	// Name title
	DependencyEdge_TITLE DependencyEdge_Label = 63
	// Adverbial phrase modifier
	DependencyEdge_ADVPHMOD DependencyEdge_Label = 64
	// Causative auxiliary
	DependencyEdge_AUXCAUS DependencyEdge_Label = 65
	// Helper auxiliary
	DependencyEdge_AUXVV DependencyEdge_Label = 66
	// Rentaishi (Prenominal modifier)
	DependencyEdge_DTMOD DependencyEdge_Label = 67
	// Foreign words
	DependencyEdge_FOREIGN DependencyEdge_Label = 68
	// Keyword
	DependencyEdge_KW DependencyEdge_Label = 69
	// List for chains of comparable items
	DependencyEdge_LIST DependencyEdge_Label = 70
	// Nominalized clause
	DependencyEdge_NOMC DependencyEdge_Label = 71
	// Nominalized clausal subject
	DependencyEdge_NOMCSUBJ DependencyEdge_Label = 72
	// Nominalized clausal passive
	DependencyEdge_NOMCSUBJPASS DependencyEdge_Label = 73
	// Compound of numeric modifier
	DependencyEdge_NUMC DependencyEdge_Label = 74
	// Copula
	DependencyEdge_COP DependencyEdge_Label = 75
	// Dislocated relation (for fronted/topicalized elements)
	DependencyEdge_DISLOCATED DependencyEdge_Label = 76
)

var DependencyEdge_Label_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "ABBREV",
	2:  "ACOMP",
	3:  "ADVCL",
	4:  "ADVMOD",
	5:  "AMOD",
	6:  "APPOS",
	7:  "ATTR",
	8:  "AUX",
	9:  "AUXPASS",
	10: "CC",
	11: "CCOMP",
	12: "CONJ",
	13: "CSUBJ",
	14: "CSUBJPASS",
	15: "DEP",
	16: "DET",
	17: "DISCOURSE",
	18: "DOBJ",
	19: "EXPL",
	20: "GOESWITH",
	21: "IOBJ",
	22: "MARK",
	23: "MWE",
	24: "MWV",
	25: "NEG",
	26: "NN",
	27: "NPADVMOD",
	28: "NSUBJ",
	29: "NSUBJPASS",
	30: "NUM",
	31: "NUMBER",
	32: "P",
	33: "PARATAXIS",
	34: "PARTMOD",
	35: "PCOMP",
	36: "POBJ",
	37: "POSS",
	38: "POSTNEG",
	39: "PRECOMP",
	40: "PRECONJ",
	41: "PREDET",
	42: "PREF",
	43: "PREP",
	44: "PRONL",
	45: "PRT",
	46: "PS",
	47: "QUANTMOD",
	48: "RCMOD",
	49: "RCMODREL",
	50: "RDROP",
	51: "REF",
	52: "REMNANT",
	53: "REPARANDUM",
	54: "ROOT",
	55: "SNUM",
	56: "SUFF",
	57: "TMOD",
	58: "TOPIC",
	59: "VMOD",
	60: "VOCATIVE",
	61: "XCOMP",
	62: "SUFFIX",
	63: "TITLE",
	64: "ADVPHMOD",
	65: "AUXCAUS",
	66: "AUXVV",
	67: "DTMOD",
	68: "FOREIGN",
	69: "KW",
	70: "LIST",
	71: "NOMC",
	72: "NOMCSUBJ",
	73: "NOMCSUBJPASS",
	74: "NUMC",
	75: "COP",
	76: "DISLOCATED",
}
var DependencyEdge_Label_value = map[string]int32{
	"UNKNOWN":      0,
	"ABBREV":       1,
	"ACOMP":        2,
	"ADVCL":        3,
	"ADVMOD":       4,
	"AMOD":         5,
	"APPOS":        6,
	"ATTR":         7,
	"AUX":          8,
	"AUXPASS":      9,
	"CC":           10,
	"CCOMP":        11,
	"CONJ":         12,
	"CSUBJ":        13,
	"CSUBJPASS":    14,
	"DEP":          15,
	"DET":          16,
	"DISCOURSE":    17,
	"DOBJ":         18,
	"EXPL":         19,
	"GOESWITH":     20,
	"IOBJ":         21,
	"MARK":         22,
	"MWE":          23,
	"MWV":          24,
	"NEG":          25,
	"NN":           26,
	"NPADVMOD":     27,
	"NSUBJ":        28,
	"NSUBJPASS":    29,
	"NUM":          30,
	"NUMBER":       31,
	"P":            32,
	"PARATAXIS":    33,
	"PARTMOD":      34,
	"PCOMP":        35,
	"POBJ":         36,
	"POSS":         37,
	"POSTNEG":      38,
	"PRECOMP":      39,
	"PRECONJ":      40,
	"PREDET":       41,
	"PREF":         42,
	"PREP":         43,
	"PRONL":        44,
	"PRT":          45,
	"PS":           46,
	"QUANTMOD":     47,
	"RCMOD":        48,
	"RCMODREL":     49,
	"RDROP":        50,
	"REF":          51,
	"REMNANT":      52,
	"REPARANDUM":   53,
	"ROOT":         54,
	"SNUM":         55,
	"SUFF":         56,
	"TMOD":         57,
	"TOPIC":        58,
	"VMOD":         59,
	"VOCATIVE":     60,
	"XCOMP":        61,
	"SUFFIX":       62,
	"TITLE":        63,
	"ADVPHMOD":     64,
	"AUXCAUS":      65,
	"AUXVV":        66,
	"DTMOD":        67,
	"FOREIGN":      68,
	"KW":           69,
	"LIST":         70,
	"NOMC":         71,
	"NOMCSUBJ":     72,
	"NOMCSUBJPASS": 73,
	"NUMC":         74,
	"COP":          75,
	"DISLOCATED":   76,
}

func (x DependencyEdge_Label) String() string {
	return proto.EnumName(DependencyEdge_Label_name, int32(x))
}
func (DependencyEdge_Label) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

// ################################################################ #
//
// Represents the input to API methods.
type Document struct {
	// Required. If the type is not set or is `TYPE_UNSPECIFIED`,
	// returns an `INVALID_ARGUMENT` error.
	Type Document_Type `protobuf:"varint,1,opt,name=type,enum=google.cloud.language.v1beta1.Document_Type" json:"type,omitempty"`
	// The source of the document: a string containing the content or a
	// Google Cloud Storage URI.
	//
	// Types that are valid to be assigned to Source:
	//	*Document_Content
	//	*Document_GcsContentUri
	Source isDocument_Source `protobuf_oneof:"source"`
	// The language of the document (if not specified, the language is
	// automatically detected). Both ISO and BCP-47 language codes are
	// accepted.<br>
	// **Current Language Restrictions:**
	//
	//  * Only English, Spanish, and Japanese textual content
	//    are supported, with the following additional restriction:
	//    * `analyzeSentiment` only supports English text.
	// If the language (either specified by the caller or automatically detected)
	// is not supported by the called API method, an `INVALID_ARGUMENT` error
	// is returned.
	Language string `protobuf:"bytes,4,opt,name=language" json:"language,omitempty"`
}

func (m *Document) Reset()                    { *m = Document{} }
func (m *Document) String() string            { return proto.CompactTextString(m) }
func (*Document) ProtoMessage()               {}
func (*Document) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isDocument_Source interface {
	isDocument_Source()
}

type Document_Content struct {
	Content string `protobuf:"bytes,2,opt,name=content,oneof"`
}
type Document_GcsContentUri struct {
	GcsContentUri string `protobuf:"bytes,3,opt,name=gcs_content_uri,json=gcsContentUri,oneof"`
}

func (*Document_Content) isDocument_Source()       {}
func (*Document_GcsContentUri) isDocument_Source() {}

func (m *Document) GetSource() isDocument_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Document) GetContent() string {
	if x, ok := m.GetSource().(*Document_Content); ok {
		return x.Content
	}
	return ""
}

func (m *Document) GetGcsContentUri() string {
	if x, ok := m.GetSource().(*Document_GcsContentUri); ok {
		return x.GcsContentUri
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Document) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Document_OneofMarshaler, _Document_OneofUnmarshaler, _Document_OneofSizer, []interface{}{
		(*Document_Content)(nil),
		(*Document_GcsContentUri)(nil),
	}
}

func _Document_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Document)
	// source
	switch x := m.Source.(type) {
	case *Document_Content:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Content)
	case *Document_GcsContentUri:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.GcsContentUri)
	case nil:
	default:
		return fmt.Errorf("Document.Source has unexpected type %T", x)
	}
	return nil
}

func _Document_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Document)
	switch tag {
	case 2: // source.content
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Source = &Document_Content{x}
		return true, err
	case 3: // source.gcs_content_uri
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Source = &Document_GcsContentUri{x}
		return true, err
	default:
		return false, nil
	}
}

func _Document_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Document)
	// source
	switch x := m.Source.(type) {
	case *Document_Content:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Content)))
		n += len(x.Content)
	case *Document_GcsContentUri:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.GcsContentUri)))
		n += len(x.GcsContentUri)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Represents a sentence in the input document.
type Sentence struct {
	// The sentence text.
	Text *TextSpan `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
}

func (m *Sentence) Reset()                    { *m = Sentence{} }
func (m *Sentence) String() string            { return proto.CompactTextString(m) }
func (*Sentence) ProtoMessage()               {}
func (*Sentence) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Sentence) GetText() *TextSpan {
	if m != nil {
		return m.Text
	}
	return nil
}

// Represents a phrase in the text that is a known entity, such as
// a person, an organization, or location. The API associates information, such
// as salience and mentions, with entities.
type Entity struct {
	// The representative name for the entity.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The entity type.
	Type Entity_Type `protobuf:"varint,2,opt,name=type,enum=google.cloud.language.v1beta1.Entity_Type" json:"type,omitempty"`
	// Metadata associated with the entity.
	//
	// Currently, only Wikipedia URLs are provided, if available.
	// The associated key is "wikipedia_url".
	Metadata map[string]string `protobuf:"bytes,3,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The salience score associated with the entity in the [0, 1.0] range.
	//
	// The salience score for an entity provides information about the
	// importance or centrality of that entity to the entire document text.
	// Scores closer to 0 are less salient, while scores closer to 1.0 are highly
	// salient.
	Salience float32 `protobuf:"fixed32,4,opt,name=salience" json:"salience,omitempty"`
	// The mentions of this entity in the input document. The API currently
	// supports proper noun mentions.
	Mentions []*EntityMention `protobuf:"bytes,5,rep,name=mentions" json:"mentions,omitempty"`
}

func (m *Entity) Reset()                    { *m = Entity{} }
func (m *Entity) String() string            { return proto.CompactTextString(m) }
func (*Entity) ProtoMessage()               {}
func (*Entity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Entity) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Entity) GetMentions() []*EntityMention {
	if m != nil {
		return m.Mentions
	}
	return nil
}

// Represents the smallest syntactic building block of the text.
type Token struct {
	// The token text.
	Text *TextSpan `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	// Parts of speech tag for this token.
	PartOfSpeech *PartOfSpeech `protobuf:"bytes,2,opt,name=part_of_speech,json=partOfSpeech" json:"part_of_speech,omitempty"`
	// Dependency tree parse for this token.
	DependencyEdge *DependencyEdge `protobuf:"bytes,3,opt,name=dependency_edge,json=dependencyEdge" json:"dependency_edge,omitempty"`
	// [Lemma](https://en.wikipedia.org/wiki/Lemma_(morphology))
	// of the token.
	Lemma string `protobuf:"bytes,4,opt,name=lemma" json:"lemma,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Token) GetText() *TextSpan {
	if m != nil {
		return m.Text
	}
	return nil
}

func (m *Token) GetPartOfSpeech() *PartOfSpeech {
	if m != nil {
		return m.PartOfSpeech
	}
	return nil
}

func (m *Token) GetDependencyEdge() *DependencyEdge {
	if m != nil {
		return m.DependencyEdge
	}
	return nil
}

// Represents the feeling associated with the entire text or entities in
// the text.
type Sentiment struct {
	// Polarity of the sentiment in the [-1.0, 1.0] range. Larger numbers
	// represent more positive sentiments.
	Polarity float32 `protobuf:"fixed32,1,opt,name=polarity" json:"polarity,omitempty"`
	// A non-negative number in the [0, +inf) range, which represents
	// the absolute magnitude of sentiment regardless of polarity (positive or
	// negative).
	Magnitude float32 `protobuf:"fixed32,2,opt,name=magnitude" json:"magnitude,omitempty"`
}

func (m *Sentiment) Reset()                    { *m = Sentiment{} }
func (m *Sentiment) String() string            { return proto.CompactTextString(m) }
func (*Sentiment) ProtoMessage()               {}
func (*Sentiment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// Represents part of speech information for a token.
type PartOfSpeech struct {
	// The part of speech tag.
	Tag PartOfSpeech_Tag `protobuf:"varint,1,opt,name=tag,enum=google.cloud.language.v1beta1.PartOfSpeech_Tag" json:"tag,omitempty"`
}

func (m *PartOfSpeech) Reset()                    { *m = PartOfSpeech{} }
func (m *PartOfSpeech) String() string            { return proto.CompactTextString(m) }
func (*PartOfSpeech) ProtoMessage()               {}
func (*PartOfSpeech) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// Represents dependency parse tree information for a token.
type DependencyEdge struct {
	// Represents the head of this token in the dependency tree.
	// This is the index of the token which has an arc going to this token.
	// The index is the position of the token in the array of tokens returned
	// by the API method. If this token is a root token, then the
	// `head_token_index` is its own index.
	HeadTokenIndex int32 `protobuf:"varint,1,opt,name=head_token_index,json=headTokenIndex" json:"head_token_index,omitempty"`
	// The parse label for the token.
	Label DependencyEdge_Label `protobuf:"varint,2,opt,name=label,enum=google.cloud.language.v1beta1.DependencyEdge_Label" json:"label,omitempty"`
}

func (m *DependencyEdge) Reset()                    { *m = DependencyEdge{} }
func (m *DependencyEdge) String() string            { return proto.CompactTextString(m) }
func (*DependencyEdge) ProtoMessage()               {}
func (*DependencyEdge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

// Represents a mention for an entity in the text. Currently, proper noun
// mentions are supported.
type EntityMention struct {
	// The mention text.
	Text *TextSpan `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
}

func (m *EntityMention) Reset()                    { *m = EntityMention{} }
func (m *EntityMention) String() string            { return proto.CompactTextString(m) }
func (*EntityMention) ProtoMessage()               {}
func (*EntityMention) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *EntityMention) GetText() *TextSpan {
	if m != nil {
		return m.Text
	}
	return nil
}

// Represents an output piece of text.
type TextSpan struct {
	// The content of the output text.
	Content string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
	// The API calculates the beginning offset of the content in the original
	// document according to the [EncodingType][google.cloud.language.v1beta1.EncodingType] specified in the API request.
	BeginOffset int32 `protobuf:"varint,2,opt,name=begin_offset,json=beginOffset" json:"begin_offset,omitempty"`
}

func (m *TextSpan) Reset()                    { *m = TextSpan{} }
func (m *TextSpan) String() string            { return proto.CompactTextString(m) }
func (*TextSpan) ProtoMessage()               {}
func (*TextSpan) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

// The sentiment analysis request message.
type AnalyzeSentimentRequest struct {
	// Input document. Currently, `analyzeSentiment` only supports English text
	// ([Document.language][google.cloud.language.v1beta1.Document.language]="EN").
	Document *Document `protobuf:"bytes,1,opt,name=document" json:"document,omitempty"`
}

func (m *AnalyzeSentimentRequest) Reset()                    { *m = AnalyzeSentimentRequest{} }
func (m *AnalyzeSentimentRequest) String() string            { return proto.CompactTextString(m) }
func (*AnalyzeSentimentRequest) ProtoMessage()               {}
func (*AnalyzeSentimentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *AnalyzeSentimentRequest) GetDocument() *Document {
	if m != nil {
		return m.Document
	}
	return nil
}

// The sentiment analysis response message.
type AnalyzeSentimentResponse struct {
	// The overall sentiment of the input document.
	DocumentSentiment *Sentiment `protobuf:"bytes,1,opt,name=document_sentiment,json=documentSentiment" json:"document_sentiment,omitempty"`
	// The language of the text, which will be the same as the language specified
	// in the request or, if not specified, the automatically-detected language.
	Language string `protobuf:"bytes,2,opt,name=language" json:"language,omitempty"`
}

func (m *AnalyzeSentimentResponse) Reset()                    { *m = AnalyzeSentimentResponse{} }
func (m *AnalyzeSentimentResponse) String() string            { return proto.CompactTextString(m) }
func (*AnalyzeSentimentResponse) ProtoMessage()               {}
func (*AnalyzeSentimentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *AnalyzeSentimentResponse) GetDocumentSentiment() *Sentiment {
	if m != nil {
		return m.DocumentSentiment
	}
	return nil
}

// The entity analysis request message.
type AnalyzeEntitiesRequest struct {
	// Input document.
	Document *Document `protobuf:"bytes,1,opt,name=document" json:"document,omitempty"`
	// The encoding type used by the API to calculate offsets.
	EncodingType EncodingType `protobuf:"varint,2,opt,name=encoding_type,json=encodingType,enum=google.cloud.language.v1beta1.EncodingType" json:"encoding_type,omitempty"`
}

func (m *AnalyzeEntitiesRequest) Reset()                    { *m = AnalyzeEntitiesRequest{} }
func (m *AnalyzeEntitiesRequest) String() string            { return proto.CompactTextString(m) }
func (*AnalyzeEntitiesRequest) ProtoMessage()               {}
func (*AnalyzeEntitiesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *AnalyzeEntitiesRequest) GetDocument() *Document {
	if m != nil {
		return m.Document
	}
	return nil
}

// The entity analysis response message.
type AnalyzeEntitiesResponse struct {
	// The recognized entities in the input document.
	Entities []*Entity `protobuf:"bytes,1,rep,name=entities" json:"entities,omitempty"`
	// The language of the text, which will be the same as the language specified
	// in the request or, if not specified, the automatically-detected language.
	Language string `protobuf:"bytes,2,opt,name=language" json:"language,omitempty"`
}

func (m *AnalyzeEntitiesResponse) Reset()                    { *m = AnalyzeEntitiesResponse{} }
func (m *AnalyzeEntitiesResponse) String() string            { return proto.CompactTextString(m) }
func (*AnalyzeEntitiesResponse) ProtoMessage()               {}
func (*AnalyzeEntitiesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *AnalyzeEntitiesResponse) GetEntities() []*Entity {
	if m != nil {
		return m.Entities
	}
	return nil
}

// The request message for the advanced text annotation API, which performs all
// the above plus syntactic analysis.
type AnnotateTextRequest struct {
	// Input document.
	Document *Document `protobuf:"bytes,1,opt,name=document" json:"document,omitempty"`
	// The enabled features.
	Features *AnnotateTextRequest_Features `protobuf:"bytes,2,opt,name=features" json:"features,omitempty"`
	// The encoding type used by the API to calculate offsets.
	EncodingType EncodingType `protobuf:"varint,3,opt,name=encoding_type,json=encodingType,enum=google.cloud.language.v1beta1.EncodingType" json:"encoding_type,omitempty"`
}

func (m *AnnotateTextRequest) Reset()                    { *m = AnnotateTextRequest{} }
func (m *AnnotateTextRequest) String() string            { return proto.CompactTextString(m) }
func (*AnnotateTextRequest) ProtoMessage()               {}
func (*AnnotateTextRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *AnnotateTextRequest) GetDocument() *Document {
	if m != nil {
		return m.Document
	}
	return nil
}

func (m *AnnotateTextRequest) GetFeatures() *AnnotateTextRequest_Features {
	if m != nil {
		return m.Features
	}
	return nil
}

// All available features for sentiment, syntax, and semantic analysis.
// Setting each one to true will enable that specific analysis for the input.
type AnnotateTextRequest_Features struct {
	// Extract syntax information.
	ExtractSyntax bool `protobuf:"varint,1,opt,name=extract_syntax,json=extractSyntax" json:"extract_syntax,omitempty"`
	// Extract entities.
	ExtractEntities bool `protobuf:"varint,2,opt,name=extract_entities,json=extractEntities" json:"extract_entities,omitempty"`
	// Extract document-level sentiment.
	ExtractDocumentSentiment bool `protobuf:"varint,3,opt,name=extract_document_sentiment,json=extractDocumentSentiment" json:"extract_document_sentiment,omitempty"`
}

func (m *AnnotateTextRequest_Features) Reset()         { *m = AnnotateTextRequest_Features{} }
func (m *AnnotateTextRequest_Features) String() string { return proto.CompactTextString(m) }
func (*AnnotateTextRequest_Features) ProtoMessage()    {}
func (*AnnotateTextRequest_Features) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{13, 0}
}

// The text annotations response message.
type AnnotateTextResponse struct {
	// Sentences in the input document. Populated if the user enables
	// [AnnotateTextRequest.Features.extract_syntax][google.cloud.language.v1beta1.AnnotateTextRequest.Features.extract_syntax].
	Sentences []*Sentence `protobuf:"bytes,1,rep,name=sentences" json:"sentences,omitempty"`
	// Tokens, along with their syntactic information, in the input document.
	// Populated if the user enables
	// [AnnotateTextRequest.Features.extract_syntax][google.cloud.language.v1beta1.AnnotateTextRequest.Features.extract_syntax].
	Tokens []*Token `protobuf:"bytes,2,rep,name=tokens" json:"tokens,omitempty"`
	// Entities, along with their semantic information, in the input document.
	// Populated if the user enables
	// [AnnotateTextRequest.Features.extract_entities][google.cloud.language.v1beta1.AnnotateTextRequest.Features.extract_entities].
	Entities []*Entity `protobuf:"bytes,3,rep,name=entities" json:"entities,omitempty"`
	// The overall sentiment for the document. Populated if the user enables
	// [AnnotateTextRequest.Features.extract_document_sentiment][google.cloud.language.v1beta1.AnnotateTextRequest.Features.extract_document_sentiment].
	DocumentSentiment *Sentiment `protobuf:"bytes,4,opt,name=document_sentiment,json=documentSentiment" json:"document_sentiment,omitempty"`
	// The language of the text, which will be the same as the language specified
	// in the request or, if not specified, the automatically-detected language.
	Language string `protobuf:"bytes,5,opt,name=language" json:"language,omitempty"`
}

func (m *AnnotateTextResponse) Reset()                    { *m = AnnotateTextResponse{} }
func (m *AnnotateTextResponse) String() string            { return proto.CompactTextString(m) }
func (*AnnotateTextResponse) ProtoMessage()               {}
func (*AnnotateTextResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *AnnotateTextResponse) GetSentences() []*Sentence {
	if m != nil {
		return m.Sentences
	}
	return nil
}

func (m *AnnotateTextResponse) GetTokens() []*Token {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *AnnotateTextResponse) GetEntities() []*Entity {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *AnnotateTextResponse) GetDocumentSentiment() *Sentiment {
	if m != nil {
		return m.DocumentSentiment
	}
	return nil
}

func init() {
	proto.RegisterType((*Document)(nil), "google.cloud.language.v1beta1.Document")
	proto.RegisterType((*Sentence)(nil), "google.cloud.language.v1beta1.Sentence")
	proto.RegisterType((*Entity)(nil), "google.cloud.language.v1beta1.Entity")
	proto.RegisterType((*Token)(nil), "google.cloud.language.v1beta1.Token")
	proto.RegisterType((*Sentiment)(nil), "google.cloud.language.v1beta1.Sentiment")
	proto.RegisterType((*PartOfSpeech)(nil), "google.cloud.language.v1beta1.PartOfSpeech")
	proto.RegisterType((*DependencyEdge)(nil), "google.cloud.language.v1beta1.DependencyEdge")
	proto.RegisterType((*EntityMention)(nil), "google.cloud.language.v1beta1.EntityMention")
	proto.RegisterType((*TextSpan)(nil), "google.cloud.language.v1beta1.TextSpan")
	proto.RegisterType((*AnalyzeSentimentRequest)(nil), "google.cloud.language.v1beta1.AnalyzeSentimentRequest")
	proto.RegisterType((*AnalyzeSentimentResponse)(nil), "google.cloud.language.v1beta1.AnalyzeSentimentResponse")
	proto.RegisterType((*AnalyzeEntitiesRequest)(nil), "google.cloud.language.v1beta1.AnalyzeEntitiesRequest")
	proto.RegisterType((*AnalyzeEntitiesResponse)(nil), "google.cloud.language.v1beta1.AnalyzeEntitiesResponse")
	proto.RegisterType((*AnnotateTextRequest)(nil), "google.cloud.language.v1beta1.AnnotateTextRequest")
	proto.RegisterType((*AnnotateTextRequest_Features)(nil), "google.cloud.language.v1beta1.AnnotateTextRequest.Features")
	proto.RegisterType((*AnnotateTextResponse)(nil), "google.cloud.language.v1beta1.AnnotateTextResponse")
	proto.RegisterEnum("google.cloud.language.v1beta1.EncodingType", EncodingType_name, EncodingType_value)
	proto.RegisterEnum("google.cloud.language.v1beta1.Document_Type", Document_Type_name, Document_Type_value)
	proto.RegisterEnum("google.cloud.language.v1beta1.Entity_Type", Entity_Type_name, Entity_Type_value)
	proto.RegisterEnum("google.cloud.language.v1beta1.PartOfSpeech_Tag", PartOfSpeech_Tag_name, PartOfSpeech_Tag_value)
	proto.RegisterEnum("google.cloud.language.v1beta1.DependencyEdge_Label", DependencyEdge_Label_name, DependencyEdge_Label_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for LanguageService service

type LanguageServiceClient interface {
	// Analyzes the sentiment of the provided text.
	AnalyzeSentiment(ctx context.Context, in *AnalyzeSentimentRequest, opts ...grpc.CallOption) (*AnalyzeSentimentResponse, error)
	// Finds named entities (currently finds proper names) in the text,
	// entity types, salience, mentions for each entity, and other properties.
	AnalyzeEntities(ctx context.Context, in *AnalyzeEntitiesRequest, opts ...grpc.CallOption) (*AnalyzeEntitiesResponse, error)
	// Advanced API that analyzes the document and provides a full set of text
	// annotations, including semantic, syntactic, and sentiment information. This
	// API is intended for users who are familiar with machine learning and need
	// in-depth text features to build upon.
	AnnotateText(ctx context.Context, in *AnnotateTextRequest, opts ...grpc.CallOption) (*AnnotateTextResponse, error)
}

type languageServiceClient struct {
	cc *grpc.ClientConn
}

func NewLanguageServiceClient(cc *grpc.ClientConn) LanguageServiceClient {
	return &languageServiceClient{cc}
}

func (c *languageServiceClient) AnalyzeSentiment(ctx context.Context, in *AnalyzeSentimentRequest, opts ...grpc.CallOption) (*AnalyzeSentimentResponse, error) {
	out := new(AnalyzeSentimentResponse)
	err := grpc.Invoke(ctx, "/google.cloud.language.v1beta1.LanguageService/AnalyzeSentiment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languageServiceClient) AnalyzeEntities(ctx context.Context, in *AnalyzeEntitiesRequest, opts ...grpc.CallOption) (*AnalyzeEntitiesResponse, error) {
	out := new(AnalyzeEntitiesResponse)
	err := grpc.Invoke(ctx, "/google.cloud.language.v1beta1.LanguageService/AnalyzeEntities", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languageServiceClient) AnnotateText(ctx context.Context, in *AnnotateTextRequest, opts ...grpc.CallOption) (*AnnotateTextResponse, error) {
	out := new(AnnotateTextResponse)
	err := grpc.Invoke(ctx, "/google.cloud.language.v1beta1.LanguageService/AnnotateText", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LanguageService service

type LanguageServiceServer interface {
	// Analyzes the sentiment of the provided text.
	AnalyzeSentiment(context.Context, *AnalyzeSentimentRequest) (*AnalyzeSentimentResponse, error)
	// Finds named entities (currently finds proper names) in the text,
	// entity types, salience, mentions for each entity, and other properties.
	AnalyzeEntities(context.Context, *AnalyzeEntitiesRequest) (*AnalyzeEntitiesResponse, error)
	// Advanced API that analyzes the document and provides a full set of text
	// annotations, including semantic, syntactic, and sentiment information. This
	// API is intended for users who are familiar with machine learning and need
	// in-depth text features to build upon.
	AnnotateText(context.Context, *AnnotateTextRequest) (*AnnotateTextResponse, error)
}

func RegisterLanguageServiceServer(s *grpc.Server, srv LanguageServiceServer) {
	s.RegisterService(&_LanguageService_serviceDesc, srv)
}

func _LanguageService_AnalyzeSentiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeSentimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageServiceServer).AnalyzeSentiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.language.v1beta1.LanguageService/AnalyzeSentiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageServiceServer).AnalyzeSentiment(ctx, req.(*AnalyzeSentimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguageService_AnalyzeEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageServiceServer).AnalyzeEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.language.v1beta1.LanguageService/AnalyzeEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageServiceServer).AnalyzeEntities(ctx, req.(*AnalyzeEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguageService_AnnotateText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnnotateTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageServiceServer).AnnotateText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.language.v1beta1.LanguageService/AnnotateText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageServiceServer).AnnotateText(ctx, req.(*AnnotateTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LanguageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.language.v1beta1.LanguageService",
	HandlerType: (*LanguageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnalyzeSentiment",
			Handler:    _LanguageService_AnalyzeSentiment_Handler,
		},
		{
			MethodName: "AnalyzeEntities",
			Handler:    _LanguageService_AnalyzeEntities_Handler,
		},
		{
			MethodName: "AnnotateText",
			Handler:    _LanguageService_AnnotateText_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() {
	proto.RegisterFile("google.golang.org/genproto/googleapis/cloud/language/v1beta1/language_service.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 1853 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x58, 0xcd, 0x72, 0x1b, 0xc7,
	0x11, 0x36, 0xfe, 0x48, 0x70, 0x48, 0x90, 0xa3, 0xb1, 0x62, 0x23, 0x88, 0x1d, 0x5b, 0x6b, 0x29,
	0xa2, 0x29, 0x09, 0x88, 0xc8, 0x98, 0x56, 0x44, 0xc7, 0xf1, 0x62, 0xb1, 0x20, 0x57, 0x04, 0x76,
	0xd7, 0xb3, 0x0b, 0x90, 0xc9, 0x21, 0xa8, 0x25, 0x30, 0x84, 0x51, 0x26, 0x17, 0x08, 0xb0, 0x50,
	0x89, 0x39, 0xa6, 0x2a, 0xc7, 0x54, 0x0e, 0xb9, 0xe5, 0x92, 0xaa, 0xe4, 0x01, 0x72, 0xc8, 0x63,
	0xe4, 0xa8, 0x27, 0x48, 0x55, 0x8e, 0x39, 0xe4, 0x90, 0x07, 0x48, 0xf7, 0xec, 0x0f, 0x09, 0x8a,
	0x11, 0x48, 0x4b, 0x17, 0x56, 0x4f, 0x6f, 0xff, 0xcd, 0xd7, 0xdf, 0xcc, 0x34, 0x48, 0x9c, 0xfe,
	0x70, 0xd8, 0x3f, 0x11, 0xe5, 0xfe, 0xf0, 0xc4, 0xf3, 0xfb, 0xe5, 0xe1, 0xb8, 0x5f, 0xe9, 0x0b,
	0x7f, 0x34, 0x1e, 0x06, 0xc3, 0x4a, 0xf8, 0xc9, 0x1b, 0x0d, 0x26, 0x95, 0xee, 0xc9, 0x70, 0xda,
	0xab, 0xa0, 0xc9, 0xd4, 0xeb, 0x8b, 0xca, 0xf3, 0xc7, 0x47, 0x22, 0xf0, 0x1e, 0x27, 0x8a, 0xce,
	0x44, 0x8c, 0x9f, 0x0f, 0xba, 0xa2, 0x2c, 0x1d, 0xd9, 0x87, 0x51, 0x50, 0xe9, 0x55, 0x8e, 0x8d,
	0xca, 0x91, 0x57, 0xc9, 0xb8, 0x5e, 0x4e, 0xf8, 0x53, 0x89, 0xe2, 0x76, 0x87, 0xfe, 0xf1, 0xa0,
	0x5f, 0xf1, 0x7c, 0x7f, 0x18, 0x78, 0xc1, 0x60, 0xe8, 0x4f, 0xc2, 0x4c, 0xca, 0x7f, 0x52, 0x24,
	0x5f, 0x1b, 0x76, 0xa7, 0xa7, 0xc2, 0x0f, 0xd8, 0x57, 0x24, 0x1b, 0x9c, 0x8d, 0x44, 0x31, 0xf5,
	0x71, 0x6a, 0x7d, 0x75, 0xf3, 0x61, 0xf9, 0xb5, 0x55, 0x94, 0x63, 0xb7, 0xb2, 0x0b, 0x3e, 0x5c,
	0x7a, 0xb2, 0x12, 0x59, 0x84, 0x54, 0x01, 0x68, 0x8b, 0x69, 0x08, 0xb2, 0xb4, 0xf7, 0x0e, 0x8f,
	0x15, 0x6c, 0x9d, 0xac, 0xf5, 0xbb, 0x93, 0x4e, 0xb4, 0xec, 0x4c, 0xc7, 0x83, 0x62, 0x26, 0xb2,
	0x29, 0xc0, 0x07, 0x2d, 0xd4, 0xb7, 0xc6, 0x03, 0x88, 0x92, 0x8f, 0xb3, 0x15, 0xb3, 0x68, 0xc2,
	0x93, 0xb5, 0xb2, 0x4d, 0xb2, 0x98, 0x8f, 0xdd, 0x26, 0xd4, 0xfd, 0x85, 0xad, 0x77, 0x5a, 0xa6,
	0x63, 0xeb, 0x9a, 0x51, 0x37, 0xf4, 0x1a, 0x7d, 0x87, 0xad, 0x12, 0x62, 0x37, 0x54, 0xc3, 0xec,
	0xb8, 0xfa, 0xa1, 0x4b, 0x53, 0x2c, 0x4f, 0xb2, 0x7b, 0x6e, 0xb3, 0x41, 0xd3, 0xd5, 0x3c, 0x59,
	0x98, 0x0c, 0xa7, 0xe3, 0xae, 0x50, 0x76, 0x49, 0xde, 0x11, 0x98, 0xab, 0x2b, 0xd8, 0x0e, 0xec,
	0x58, 0xbc, 0x08, 0xe4, 0x8e, 0x97, 0x37, 0xef, 0xcf, 0xd9, 0xb1, 0x0b, 0xa6, 0xce, 0xc8, 0xf3,
	0xb9, 0x74, 0x52, 0xfe, 0x91, 0x21, 0x0b, 0xba, 0x1f, 0x0c, 0x82, 0x33, 0xc6, 0x48, 0xd6, 0xf7,
	0x4e, 0x43, 0xe4, 0x96, 0xb8, 0x94, 0xd9, 0x97, 0x11, 0x9a, 0x69, 0x89, 0xe6, 0xc6, 0x9c, 0xd8,
	0x61, 0xa0, 0x8b, 0x58, 0x5a, 0x24, 0x7f, 0x0a, 0x9f, 0x7a, 0x5e, 0xe0, 0x01, 0x50, 0x19, 0xa8,
	0x6f, 0xeb, 0x7a, 0x31, 0x9a, 0x91, 0x17, 0x2c, 0xc7, 0x67, 0x3c, 0x09, 0x82, 0xb0, 0x4e, 0xbc,
	0x93, 0x01, 0x6e, 0x5c, 0xc2, 0x9a, 0xe6, 0xc9, 0x9a, 0xed, 0x61, 0x32, 0x5f, 0x32, 0xa3, 0x98,
	0x93, 0xc9, 0x1e, 0x5e, 0x2b, 0x59, 0x33, 0x74, 0xe2, 0x89, 0x77, 0x69, 0x87, 0x14, 0x66, 0x0a,
	0x60, 0x94, 0x64, 0xbe, 0x15, 0x67, 0x11, 0x34, 0x28, 0x42, 0xef, 0x72, 0xcf, 0xbd, 0x93, 0x69,
	0x08, 0xcd, 0x12, 0x0f, 0x17, 0x4f, 0xd3, 0x4f, 0x52, 0xca, 0x59, 0xd4, 0xdd, 0x65, 0xb2, 0xd8,
	0x32, 0xf7, 0x4d, 0xeb, 0xc0, 0x84, 0xa6, 0x12, 0xb2, 0x60, 0xeb, 0xdc, 0xb1, 0x4c, 0x68, 0xe8,
	0x0a, 0xc9, 0x37, 0x2c, 0x4d, 0x75, 0x0d, 0x58, 0xa5, 0x21, 0xf4, 0x8a, 0xc5, 0x77, 0x55, 0xd3,
	0xf8, 0x65, 0xa8, 0xc9, 0xb0, 0x25, 0x92, 0xd3, 0xdb, 0xba, 0xe9, 0xd2, 0x2c, 0x5b, 0x23, 0xcb,
	0x07, 0x16, 0xdf, 0xef, 0x58, 0xf5, 0x8e, 0xca, 0x5d, 0x9a, 0x63, 0xb7, 0x48, 0x41, 0xb3, 0x4c,
	0xa7, 0xd5, 0xd4, 0x79, 0x67, 0xd7, 0xb2, 0x6a, 0x74, 0x01, 0xcd, 0x2d, 0x77, 0x4f, 0xe7, 0x74,
	0x51, 0xf9, 0x5d, 0x9a, 0xe4, 0xdc, 0xe1, 0xb7, 0xc2, 0x7f, 0x23, 0x52, 0xb0, 0xaf, 0xc9, 0xea,
	0xc8, 0x1b, 0x07, 0x9d, 0xe1, 0x71, 0x67, 0x32, 0x12, 0xa2, 0xfb, 0x8d, 0xdc, 0xe4, 0xf2, 0xe6,
	0x83, 0x39, 0x61, 0x6c, 0x70, 0xb2, 0x8e, 0x1d, 0xe9, 0xc2, 0x57, 0x46, 0x17, 0x56, 0xac, 0x4d,
	0xd6, 0x7a, 0x62, 0x24, 0xfc, 0x1e, 0x74, 0xea, 0xac, 0x23, 0x7a, 0x70, 0x2a, 0x32, 0x32, 0xe6,
	0xa3, 0x79, 0x27, 0x34, 0xf1, 0xd2, 0xc1, 0x89, 0xaf, 0xf6, 0x66, 0xd6, 0xd8, 0x86, 0x13, 0x71,
	0x7a, 0xea, 0x45, 0x67, 0x2c, 0x5c, 0x28, 0x3a, 0x59, 0xc2, 0xe3, 0x31, 0x90, 0x37, 0x02, 0x50,
	0x66, 0x04, 0x97, 0xcc, 0x18, 0x3a, 0x2d, 0xe1, 0x00, 0xca, 0xc4, 0x6b, 0xf6, 0x01, 0x59, 0x3a,
	0xf5, 0xfa, 0xfe, 0x20, 0x98, 0xf6, 0xc2, 0x4e, 0xa6, 0xf9, 0xb9, 0x42, 0xf9, 0x67, 0x8a, 0xac,
	0x5c, 0xdc, 0x13, 0x53, 0x49, 0x26, 0xf0, 0xfa, 0xd1, 0xdd, 0x52, 0xb9, 0x01, 0x1a, 0x65, 0xd7,
	0xeb, 0x73, 0xf4, 0x55, 0x7e, 0x9f, 0x22, 0x19, 0x58, 0xcc, 0xb2, 0x63, 0x91, 0x64, 0xd4, 0xda,
	0x33, 0xa0, 0x86, 0x14, 0x6c, 0x60, 0x85, 0x14, 0xda, 0x40, 0x06, 0x38, 0xfd, 0xd0, 0xf0, 0x67,
	0xc0, 0x05, 0x50, 0xd5, 0x74, 0xe4, 0x00, 0xa8, 0x4c, 0xab, 0x65, 0x42, 0xeb, 0x41, 0x65, 0xb6,
	0x9a, 0x74, 0x11, 0x55, 0x36, 0x07, 0xf2, 0xe4, 0x51, 0x65, 0x03, 0x53, 0x96, 0x90, 0x16, 0x76,
	0xcb, 0xd4, 0x5c, 0x4a, 0xf0, 0x6b, 0x5b, 0xe7, 0x55, 0xba, 0xcc, 0x72, 0x24, 0x75, 0x48, 0x57,
	0xf0, 0x9b, 0x5a, 0xaf, 0x1b, 0x87, 0xb4, 0xa0, 0xfc, 0x77, 0x91, 0xac, 0xce, 0x62, 0x0c, 0x97,
	0x1c, 0xfd, 0x46, 0x78, 0xbd, 0x4e, 0x80, 0x4c, 0xea, 0x0c, 0xe0, 0xcb, 0x0b, 0xb9, 0xe5, 0x1c,
	0x5f, 0x45, 0xbd, 0x24, 0x98, 0x81, 0x5a, 0x66, 0x00, 0xfa, 0xde, 0x91, 0x38, 0x89, 0xee, 0x87,
	0xad, 0x1b, 0xf5, 0xb2, 0xdc, 0x40, 0x57, 0x1e, 0x46, 0x50, 0xfe, 0xbd, 0x40, 0x72, 0x52, 0xf1,
	0xca, 0xb9, 0x51, 0xab, 0x55, 0xae, 0xb7, 0x01, 0x1c, 0xac, 0x5a, 0xb3, 0x9a, 0x08, 0x0f, 0x8a,
	0xb5, 0xb6, 0xd6, 0x00, 0x80, 0xd0, 0xa2, 0xd6, 0x6e, 0xc2, 0x51, 0xc8, 0xe2, 0x46, 0x55, 0x94,
	0x72, 0xd2, 0xc0, 0xb6, 0x2d, 0x07, 0x40, 0x42, 0xa5, 0xeb, 0xc2, 0xf1, 0x90, 0xa0, 0xb6, 0x0e,
	0x01, 0x24, 0x48, 0x01, 0x82, 0xad, 0x3a, 0x0e, 0x00, 0xb5, 0x40, 0xd2, 0x9a, 0x06, 0x28, 0x81,
	0x8b, 0x26, 0xc3, 0x2f, 0x27, 0xa0, 0x4b, 0xa4, 0x34, 0xa7, 0x55, 0x7d, 0x46, 0x0b, 0xac, 0x40,
	0x96, 0xa4, 0x28, 0xdd, 0x56, 0xc3, 0x76, 0xd8, 0x74, 0x2d, 0xee, 0x0b, 0x45, 0x83, 0x9a, 0xe1,
	0x68, 0x56, 0x8b, 0x3b, 0x3a, 0xbd, 0x85, 0x41, 0x6a, 0x16, 0x78, 0x32, 0x94, 0xf4, 0x43, 0xbb,
	0x41, 0xdf, 0xc5, 0xa3, 0xbf, 0x6b, 0xe9, 0xce, 0x81, 0xe1, 0xee, 0xd1, 0xdb, 0xa8, 0x37, 0xd0,
	0xe2, 0x7b, 0x28, 0x35, 0x55, 0xbe, 0x4f, 0xdf, 0xc3, 0x68, 0xcd, 0x03, 0x9d, 0xbe, 0x1f, 0x0a,
	0x6d, 0x5a, 0x94, 0x4d, 0xd6, 0x77, 0xe9, 0xf7, 0xb1, 0x50, 0xd3, 0xa4, 0x25, 0x0c, 0x62, 0xda,
	0xd1, 0x9e, 0x7f, 0x80, 0x15, 0x9a, 0xb2, 0xc2, 0x0f, 0xb0, 0x00, 0x33, 0xa9, 0xf0, 0xc3, 0x98,
	0x1d, 0x3f, 0x44, 0x88, 0x40, 0xa8, 0xc2, 0x15, 0xf1, 0x11, 0x32, 0xc0, 0xa6, 0x1f, 0xa3, 0xa9,
	0xad, 0x72, 0xd5, 0x55, 0x0f, 0x0d, 0x87, 0xde, 0x41, 0x40, 0x60, 0xe9, 0x62, 0x44, 0x45, 0x32,
	0x47, 0x02, 0xf1, 0x89, 0xe4, 0x15, 0x56, 0x78, 0x37, 0x94, 0x20, 0xec, 0x3d, 0x69, 0x6b, 0x39,
	0x2e, 0xd6, 0xf4, 0x23, 0xb9, 0xe0, 0xba, 0xb4, 0xbe, 0x9f, 0x2c, 0x00, 0xb9, 0x75, 0x79, 0xe3,
	0x71, 0x1d, 0x91, 0xf9, 0x34, 0xa4, 0xa7, 0x5e, 0xa7, 0x1b, 0x91, 0x64, 0xd3, 0x07, 0x32, 0x0b,
	0x50, 0xb6, 0x41, 0x1f, 0xc6, 0x9c, 0x7d, 0x84, 0x3b, 0xb4, 0x1d, 0x5a, 0xc6, 0x1d, 0x7e, 0xdd,
	0x52, 0x4d, 0x59, 0x4f, 0x05, 0x2d, 0xb9, 0x86, 0xe2, 0x8f, 0xf1, 0x83, 0x14, 0xb9, 0xde, 0xa0,
	0x8f, 0xe5, 0x87, 0x1a, 0xb7, 0x6c, 0xba, 0x89, 0x21, 0x30, 0xc1, 0x16, 0xd6, 0xc0, 0xf5, 0xa6,
	0x09, 0xce, 0xf4, 0x27, 0xf8, 0x94, 0x42, 0x32, 0xd8, 0xa7, 0x59, 0x03, 0x20, 0x3e, 0xc3, 0xec,
	0xdc, 0xb2, 0x5c, 0xba, 0x8d, 0x92, 0x83, 0xe0, 0x7c, 0x2e, 0xa5, 0x56, 0xbd, 0x4e, 0x9f, 0xa0,
	0x24, 0x33, 0xfe, 0x14, 0x03, 0xbb, 0x96, 0x6d, 0x68, 0xf4, 0xa9, 0x3c, 0x3b, 0xa8, 0xdc, 0xc1,
	0xdc, 0x6d, 0x79, 0x6d, 0xb7, 0x75, 0xfa, 0x05, 0x9a, 0x1c, 0xca, 0x6d, 0xff, 0x0c, 0x77, 0x8a,
	0x11, 0xe0, 0x38, 0x7d, 0x29, 0x3d, 0x0d, 0xb7, 0xa1, 0xd3, 0x9f, 0xa3, 0x3d, 0x34, 0xc9, 0xde,
	0x43, 0xef, 0xaf, 0x22, 0xca, 0x69, 0x6a, 0xcb, 0xa1, 0xaa, 0x64, 0x67, 0xeb, 0xb0, 0xdd, 0xa6,
	0x55, 0x14, 0x6b, 0x32, 0xab, 0x86, 0x26, 0x75, 0x8b, 0xeb, 0xc6, 0xae, 0x49, 0x6b, 0x08, 0xc5,
	0xfe, 0x01, 0xd5, 0x31, 0x7f, 0xc3, 0x70, 0x5c, 0x5a, 0x0f, 0x8f, 0x7d, 0x53, 0xa3, 0xbb, 0x92,
	0x00, 0x20, 0xc9, 0xae, 0xef, 0xe1, 0x03, 0x12, 0xaf, 0x64, 0xe3, 0x0d, 0x69, 0xd9, 0x02, 0xcb,
	0x67, 0x08, 0x8b, 0x06, 0xf8, 0xec, 0x23, 0x12, 0xc0, 0x4d, 0xf9, 0xec, 0xc0, 0x90, 0xd1, 0x50,
	0x1a, 0xa4, 0x30, 0xf3, 0xf8, 0xbd, 0xd9, 0x14, 0x01, 0xe3, 0x48, 0xac, 0x61, 0xc5, 0xf3, 0xf1,
	0x29, 0x7c, 0x2e, 0x93, 0xe1, 0xe9, 0x0e, 0x59, 0x39, 0x12, 0xfd, 0x81, 0x0f, 0xef, 0xca, 0xf1,
	0x44, 0x84, 0xd3, 0x55, 0x8e, 0x2f, 0x4b, 0x9d, 0x25, 0x55, 0xca, 0xaf, 0xc8, 0xfb, 0xaa, 0xef,
	0x9d, 0x9c, 0xfd, 0x46, 0x24, 0xf7, 0x37, 0x17, 0xbf, 0x9e, 0x8a, 0x49, 0xc0, 0x34, 0x92, 0xef,
	0x45, 0xd3, 0xda, 0x35, 0x8b, 0x8c, 0x87, 0x3b, 0x9e, 0x38, 0x2a, 0x7f, 0x48, 0x91, 0xe2, 0xab,
	0x09, 0x26, 0x23, 0x78, 0xf4, 0x05, 0x3b, 0x20, 0x2c, 0x36, 0x84, 0x59, 0x36, 0xfa, 0x1a, 0xe5,
	0x5a, 0x9f, 0x93, 0xeb, 0x3c, 0xda, 0xad, 0x38, 0xc6, 0xcc, 0x0b, 0x94, 0xcc, 0x82, 0xe9, 0x4b,
	0xb3, 0xe0, 0xdf, 0x52, 0xe4, 0xbd, 0xa8, 0x22, 0xd9, 0x90, 0x81, 0x98, 0xbc, 0xcd, 0x1d, 0x33,
	0x9b, 0x14, 0xe0, 0xc2, 0x1d, 0xf6, 0x06, 0x7e, 0xbf, 0x73, 0x61, 0x94, 0x7b, 0x30, 0x77, 0x32,
	0x0a, 0x7d, 0xe4, 0x2c, 0xb7, 0x22, 0x2e, 0xac, 0x94, 0x17, 0x49, 0x8f, 0xce, 0x0b, 0x8e, 0x10,
	0x54, 0x49, 0x5e, 0x44, 0x3a, 0xa8, 0x18, 0x27, 0xb0, 0x7b, 0xd7, 0x9a, 0xc0, 0x78, 0xe2, 0xf6,
	0x5a, 0xac, 0xfe, 0x92, 0x21, 0xef, 0xaa, 0xe1, 0xf8, 0x2f, 0x90, 0x6f, 0x6f, 0x15, 0xa8, 0x03,
	0x92, 0x3f, 0x16, 0x5e, 0x30, 0x1d, 0x43, 0xed, 0xe1, 0xb8, 0xb3, 0x33, 0x27, 0xc8, 0x15, 0xa5,
	0x94, 0xeb, 0x51, 0x08, 0x9e, 0x04, 0x7b, 0xb5, 0x03, 0x99, 0x37, 0xec, 0x40, 0xe9, 0x4f, 0xf0,
	0x83, 0x27, 0x4e, 0xc4, 0xee, 0x91, 0x55, 0xc8, 0x3f, 0xf6, 0xba, 0x40, 0xda, 0x33, 0x3f, 0xf0,
	0xc2, 0xb7, 0x3a, 0xcf, 0x0b, 0x91, 0xd6, 0x91, 0x4a, 0xf6, 0x29, 0xa1, 0xb1, 0x59, 0xd2, 0xa2,
	0xb4, 0x34, 0x5c, 0x8b, 0xf4, 0x71, 0x37, 0xd9, 0x17, 0xa4, 0x14, 0x9b, 0x5e, 0x71, 0x1e, 0x32,
	0xd2, 0xa9, 0x18, 0x59, 0xd4, 0x2e, 0x93, 0x5d, 0x79, 0x99, 0x26, 0xb7, 0x67, 0x91, 0x89, 0xc8,
	0x01, 0x43, 0xd9, 0x24, 0xfa, 0xcd, 0x12, 0xb3, 0xe3, 0xfe, 0x35, 0x4e, 0x15, 0xda, 0xf3, 0x73,
	0x4f, 0xa8, 0x6e, 0x41, 0x0e, 0x26, 0x58, 0x3e, 0xc6, 0xb8, 0x3b, 0xef, 0xaa, 0x42, 0x63, 0x1e,
	0xf9, 0xcc, 0x30, 0x34, 0xf3, 0xdd, 0x18, 0x7a, 0xf5, 0x35, 0x91, 0x7d, 0xbb, 0xd7, 0x44, 0x6e,
	0x96, 0xfa, 0x1b, 0x4f, 0xc8, 0xca, 0x45, 0x42, 0x84, 0x8f, 0x81, 0xa9, 0xc3, 0x84, 0x04, 0x52,
	0xcb, 0xad, 0x3f, 0x09, 0xe7, 0x23, 0x90, 0x1e, 0x6f, 0x87, 0xf3, 0x11, 0x88, 0x5b, 0x9b, 0x34,
	0xb3, 0xf9, 0xe7, 0x2c, 0x59, 0x6b, 0x44, 0x61, 0x9c, 0xf0, 0x97, 0x34, 0xfb, 0x7b, 0x8a, 0xd0,
	0xcb, 0xd7, 0x20, 0xdb, 0x9e, 0x4b, 0xf7, 0x2b, 0x2f, 0xe6, 0xd2, 0xe7, 0x37, 0xf6, 0x0b, 0x09,
	0xa1, 0x94, 0x7f, 0xfb, 0xf2, 0x5f, 0x7f, 0x4c, 0xaf, 0x2b, 0x9f, 0x24, 0xff, 0x4a, 0x88, 0x31,
	0x99, 0x3c, 0xf5, 0x2e, 0x39, 0x3d, 0x4d, 0x6d, 0x30, 0xb8, 0x2a, 0xd7, 0x2e, 0xdd, 0x3c, 0xec,
	0xb3, 0xeb, 0x25, 0xbf, 0x74, 0xb5, 0x96, 0xb6, 0x6f, 0xea, 0x16, 0x95, 0xfc, 0x48, 0x96, 0x7c,
	0x5f, 0x51, 0xfe, 0x7f, 0xc9, 0xb1, 0x0f, 0x56, 0xfc, 0x57, 0xf8, 0x01, 0x71, 0xf1, 0x2c, 0xb0,
	0xcd, 0x9b, 0x5f, 0x29, 0xa5, 0xad, 0x1b, 0xf9, 0x44, 0x85, 0x6e, 0xc8, 0x42, 0xef, 0x2a, 0x1f,
	0x5d, 0x59, 0xe8, 0xb9, 0x03, 0x54, 0x59, 0xdd, 0x21, 0x77, 0xba, 0xc3, 0xd3, 0xd7, 0x67, 0xa9,
	0xde, 0xbe, 0xc4, 0x21, 0x1b, 0xff, 0xf5, 0x62, 0xa7, 0x8e, 0x16, 0xe4, 0xff, 0x60, 0xb6, 0xfe,
	0x17, 0x00, 0x00, 0xff, 0xff, 0x1f, 0xa0, 0xf7, 0xb7, 0x44, 0x12, 0x00, 0x00,
}
